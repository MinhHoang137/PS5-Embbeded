
PS5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003224  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080033d0  080033d0  000043d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080033e8  080033e8  0000507c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080033e8  080033e8  000043e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080033f0  080033f0  0000507c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080033f0  080033f0  000043f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080033f4  080033f4  000043f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  080033f8  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000507c  2**0
                  CONTENTS
 10 .bss          000000b0  2000007c  2000007c  0000507c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000012c  2000012c  0000507c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000507c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000dffd  00000000  00000000  000050ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001f4a  00000000  00000000  000130a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000cb0  00000000  00000000  00014ff8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009ed  00000000  00000000  00015ca8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023823  00000000  00000000  00016695  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f182  00000000  00000000  00039eb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d9b5c  00000000  00000000  0004903a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00122b96  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000350c  00000000  00000000  00122bdc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000053  00000000  00000000  001260e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000007c 	.word	0x2000007c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	080033b8 	.word	0x080033b8

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000080 	.word	0x20000080
 80001e8:	080033b8 	.word	0x080033b8

080001ec <strlen>:
 80001ec:	4603      	mov	r3, r0
 80001ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f2:	2a00      	cmp	r2, #0
 80001f4:	d1fb      	bne.n	80001ee <strlen+0x2>
 80001f6:	1a18      	subs	r0, r3, r0
 80001f8:	3801      	subs	r0, #1
 80001fa:	4770      	bx	lr

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295
 800020c:	f04f 30ff 	movne.w	r0, #4294967295
 8000210:	f000 b988 	b.w	8000524 <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9d08      	ldr	r5, [sp, #32]
 8000232:	468e      	mov	lr, r1
 8000234:	4604      	mov	r4, r0
 8000236:	4688      	mov	r8, r1
 8000238:	2b00      	cmp	r3, #0
 800023a:	d14a      	bne.n	80002d2 <__udivmoddi4+0xa6>
 800023c:	428a      	cmp	r2, r1
 800023e:	4617      	mov	r7, r2
 8000240:	d962      	bls.n	8000308 <__udivmoddi4+0xdc>
 8000242:	fab2 f682 	clz	r6, r2
 8000246:	b14e      	cbz	r6, 800025c <__udivmoddi4+0x30>
 8000248:	f1c6 0320 	rsb	r3, r6, #32
 800024c:	fa01 f806 	lsl.w	r8, r1, r6
 8000250:	fa20 f303 	lsr.w	r3, r0, r3
 8000254:	40b7      	lsls	r7, r6
 8000256:	ea43 0808 	orr.w	r8, r3, r8
 800025a:	40b4      	lsls	r4, r6
 800025c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000260:	fa1f fc87 	uxth.w	ip, r7
 8000264:	fbb8 f1fe 	udiv	r1, r8, lr
 8000268:	0c23      	lsrs	r3, r4, #16
 800026a:	fb0e 8811 	mls	r8, lr, r1, r8
 800026e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000272:	fb01 f20c 	mul.w	r2, r1, ip
 8000276:	429a      	cmp	r2, r3
 8000278:	d909      	bls.n	800028e <__udivmoddi4+0x62>
 800027a:	18fb      	adds	r3, r7, r3
 800027c:	f101 30ff 	add.w	r0, r1, #4294967295
 8000280:	f080 80ea 	bcs.w	8000458 <__udivmoddi4+0x22c>
 8000284:	429a      	cmp	r2, r3
 8000286:	f240 80e7 	bls.w	8000458 <__udivmoddi4+0x22c>
 800028a:	3902      	subs	r1, #2
 800028c:	443b      	add	r3, r7
 800028e:	1a9a      	subs	r2, r3, r2
 8000290:	b2a3      	uxth	r3, r4
 8000292:	fbb2 f0fe 	udiv	r0, r2, lr
 8000296:	fb0e 2210 	mls	r2, lr, r0, r2
 800029a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800029e:	fb00 fc0c 	mul.w	ip, r0, ip
 80002a2:	459c      	cmp	ip, r3
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0x8e>
 80002a6:	18fb      	adds	r3, r7, r3
 80002a8:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ac:	f080 80d6 	bcs.w	800045c <__udivmoddi4+0x230>
 80002b0:	459c      	cmp	ip, r3
 80002b2:	f240 80d3 	bls.w	800045c <__udivmoddi4+0x230>
 80002b6:	443b      	add	r3, r7
 80002b8:	3802      	subs	r0, #2
 80002ba:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002be:	eba3 030c 	sub.w	r3, r3, ip
 80002c2:	2100      	movs	r1, #0
 80002c4:	b11d      	cbz	r5, 80002ce <__udivmoddi4+0xa2>
 80002c6:	40f3      	lsrs	r3, r6
 80002c8:	2200      	movs	r2, #0
 80002ca:	e9c5 3200 	strd	r3, r2, [r5]
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d905      	bls.n	80002e2 <__udivmoddi4+0xb6>
 80002d6:	b10d      	cbz	r5, 80002dc <__udivmoddi4+0xb0>
 80002d8:	e9c5 0100 	strd	r0, r1, [r5]
 80002dc:	2100      	movs	r1, #0
 80002de:	4608      	mov	r0, r1
 80002e0:	e7f5      	b.n	80002ce <__udivmoddi4+0xa2>
 80002e2:	fab3 f183 	clz	r1, r3
 80002e6:	2900      	cmp	r1, #0
 80002e8:	d146      	bne.n	8000378 <__udivmoddi4+0x14c>
 80002ea:	4573      	cmp	r3, lr
 80002ec:	d302      	bcc.n	80002f4 <__udivmoddi4+0xc8>
 80002ee:	4282      	cmp	r2, r0
 80002f0:	f200 8105 	bhi.w	80004fe <__udivmoddi4+0x2d2>
 80002f4:	1a84      	subs	r4, r0, r2
 80002f6:	eb6e 0203 	sbc.w	r2, lr, r3
 80002fa:	2001      	movs	r0, #1
 80002fc:	4690      	mov	r8, r2
 80002fe:	2d00      	cmp	r5, #0
 8000300:	d0e5      	beq.n	80002ce <__udivmoddi4+0xa2>
 8000302:	e9c5 4800 	strd	r4, r8, [r5]
 8000306:	e7e2      	b.n	80002ce <__udivmoddi4+0xa2>
 8000308:	2a00      	cmp	r2, #0
 800030a:	f000 8090 	beq.w	800042e <__udivmoddi4+0x202>
 800030e:	fab2 f682 	clz	r6, r2
 8000312:	2e00      	cmp	r6, #0
 8000314:	f040 80a4 	bne.w	8000460 <__udivmoddi4+0x234>
 8000318:	1a8a      	subs	r2, r1, r2
 800031a:	0c03      	lsrs	r3, r0, #16
 800031c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000320:	b280      	uxth	r0, r0
 8000322:	b2bc      	uxth	r4, r7
 8000324:	2101      	movs	r1, #1
 8000326:	fbb2 fcfe 	udiv	ip, r2, lr
 800032a:	fb0e 221c 	mls	r2, lr, ip, r2
 800032e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000332:	fb04 f20c 	mul.w	r2, r4, ip
 8000336:	429a      	cmp	r2, r3
 8000338:	d907      	bls.n	800034a <__udivmoddi4+0x11e>
 800033a:	18fb      	adds	r3, r7, r3
 800033c:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000340:	d202      	bcs.n	8000348 <__udivmoddi4+0x11c>
 8000342:	429a      	cmp	r2, r3
 8000344:	f200 80e0 	bhi.w	8000508 <__udivmoddi4+0x2dc>
 8000348:	46c4      	mov	ip, r8
 800034a:	1a9b      	subs	r3, r3, r2
 800034c:	fbb3 f2fe 	udiv	r2, r3, lr
 8000350:	fb0e 3312 	mls	r3, lr, r2, r3
 8000354:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000358:	fb02 f404 	mul.w	r4, r2, r4
 800035c:	429c      	cmp	r4, r3
 800035e:	d907      	bls.n	8000370 <__udivmoddi4+0x144>
 8000360:	18fb      	adds	r3, r7, r3
 8000362:	f102 30ff 	add.w	r0, r2, #4294967295
 8000366:	d202      	bcs.n	800036e <__udivmoddi4+0x142>
 8000368:	429c      	cmp	r4, r3
 800036a:	f200 80ca 	bhi.w	8000502 <__udivmoddi4+0x2d6>
 800036e:	4602      	mov	r2, r0
 8000370:	1b1b      	subs	r3, r3, r4
 8000372:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000376:	e7a5      	b.n	80002c4 <__udivmoddi4+0x98>
 8000378:	f1c1 0620 	rsb	r6, r1, #32
 800037c:	408b      	lsls	r3, r1
 800037e:	fa22 f706 	lsr.w	r7, r2, r6
 8000382:	431f      	orrs	r7, r3
 8000384:	fa0e f401 	lsl.w	r4, lr, r1
 8000388:	fa20 f306 	lsr.w	r3, r0, r6
 800038c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000390:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000394:	4323      	orrs	r3, r4
 8000396:	fa00 f801 	lsl.w	r8, r0, r1
 800039a:	fa1f fc87 	uxth.w	ip, r7
 800039e:	fbbe f0f9 	udiv	r0, lr, r9
 80003a2:	0c1c      	lsrs	r4, r3, #16
 80003a4:	fb09 ee10 	mls	lr, r9, r0, lr
 80003a8:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003ac:	fb00 fe0c 	mul.w	lr, r0, ip
 80003b0:	45a6      	cmp	lr, r4
 80003b2:	fa02 f201 	lsl.w	r2, r2, r1
 80003b6:	d909      	bls.n	80003cc <__udivmoddi4+0x1a0>
 80003b8:	193c      	adds	r4, r7, r4
 80003ba:	f100 3aff 	add.w	sl, r0, #4294967295
 80003be:	f080 809c 	bcs.w	80004fa <__udivmoddi4+0x2ce>
 80003c2:	45a6      	cmp	lr, r4
 80003c4:	f240 8099 	bls.w	80004fa <__udivmoddi4+0x2ce>
 80003c8:	3802      	subs	r0, #2
 80003ca:	443c      	add	r4, r7
 80003cc:	eba4 040e 	sub.w	r4, r4, lr
 80003d0:	fa1f fe83 	uxth.w	lr, r3
 80003d4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003d8:	fb09 4413 	mls	r4, r9, r3, r4
 80003dc:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003e0:	fb03 fc0c 	mul.w	ip, r3, ip
 80003e4:	45a4      	cmp	ip, r4
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x1ce>
 80003e8:	193c      	adds	r4, r7, r4
 80003ea:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ee:	f080 8082 	bcs.w	80004f6 <__udivmoddi4+0x2ca>
 80003f2:	45a4      	cmp	ip, r4
 80003f4:	d97f      	bls.n	80004f6 <__udivmoddi4+0x2ca>
 80003f6:	3b02      	subs	r3, #2
 80003f8:	443c      	add	r4, r7
 80003fa:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003fe:	eba4 040c 	sub.w	r4, r4, ip
 8000402:	fba0 ec02 	umull	lr, ip, r0, r2
 8000406:	4564      	cmp	r4, ip
 8000408:	4673      	mov	r3, lr
 800040a:	46e1      	mov	r9, ip
 800040c:	d362      	bcc.n	80004d4 <__udivmoddi4+0x2a8>
 800040e:	d05f      	beq.n	80004d0 <__udivmoddi4+0x2a4>
 8000410:	b15d      	cbz	r5, 800042a <__udivmoddi4+0x1fe>
 8000412:	ebb8 0203 	subs.w	r2, r8, r3
 8000416:	eb64 0409 	sbc.w	r4, r4, r9
 800041a:	fa04 f606 	lsl.w	r6, r4, r6
 800041e:	fa22 f301 	lsr.w	r3, r2, r1
 8000422:	431e      	orrs	r6, r3
 8000424:	40cc      	lsrs	r4, r1
 8000426:	e9c5 6400 	strd	r6, r4, [r5]
 800042a:	2100      	movs	r1, #0
 800042c:	e74f      	b.n	80002ce <__udivmoddi4+0xa2>
 800042e:	fbb1 fcf2 	udiv	ip, r1, r2
 8000432:	0c01      	lsrs	r1, r0, #16
 8000434:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000438:	b280      	uxth	r0, r0
 800043a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800043e:	463b      	mov	r3, r7
 8000440:	4638      	mov	r0, r7
 8000442:	463c      	mov	r4, r7
 8000444:	46b8      	mov	r8, r7
 8000446:	46be      	mov	lr, r7
 8000448:	2620      	movs	r6, #32
 800044a:	fbb1 f1f7 	udiv	r1, r1, r7
 800044e:	eba2 0208 	sub.w	r2, r2, r8
 8000452:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000456:	e766      	b.n	8000326 <__udivmoddi4+0xfa>
 8000458:	4601      	mov	r1, r0
 800045a:	e718      	b.n	800028e <__udivmoddi4+0x62>
 800045c:	4610      	mov	r0, r2
 800045e:	e72c      	b.n	80002ba <__udivmoddi4+0x8e>
 8000460:	f1c6 0220 	rsb	r2, r6, #32
 8000464:	fa2e f302 	lsr.w	r3, lr, r2
 8000468:	40b7      	lsls	r7, r6
 800046a:	40b1      	lsls	r1, r6
 800046c:	fa20 f202 	lsr.w	r2, r0, r2
 8000470:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000474:	430a      	orrs	r2, r1
 8000476:	fbb3 f8fe 	udiv	r8, r3, lr
 800047a:	b2bc      	uxth	r4, r7
 800047c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000480:	0c11      	lsrs	r1, r2, #16
 8000482:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000486:	fb08 f904 	mul.w	r9, r8, r4
 800048a:	40b0      	lsls	r0, r6
 800048c:	4589      	cmp	r9, r1
 800048e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000492:	b280      	uxth	r0, r0
 8000494:	d93e      	bls.n	8000514 <__udivmoddi4+0x2e8>
 8000496:	1879      	adds	r1, r7, r1
 8000498:	f108 3cff 	add.w	ip, r8, #4294967295
 800049c:	d201      	bcs.n	80004a2 <__udivmoddi4+0x276>
 800049e:	4589      	cmp	r9, r1
 80004a0:	d81f      	bhi.n	80004e2 <__udivmoddi4+0x2b6>
 80004a2:	eba1 0109 	sub.w	r1, r1, r9
 80004a6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004aa:	fb09 f804 	mul.w	r8, r9, r4
 80004ae:	fb0e 1119 	mls	r1, lr, r9, r1
 80004b2:	b292      	uxth	r2, r2
 80004b4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b8:	4542      	cmp	r2, r8
 80004ba:	d229      	bcs.n	8000510 <__udivmoddi4+0x2e4>
 80004bc:	18ba      	adds	r2, r7, r2
 80004be:	f109 31ff 	add.w	r1, r9, #4294967295
 80004c2:	d2c4      	bcs.n	800044e <__udivmoddi4+0x222>
 80004c4:	4542      	cmp	r2, r8
 80004c6:	d2c2      	bcs.n	800044e <__udivmoddi4+0x222>
 80004c8:	f1a9 0102 	sub.w	r1, r9, #2
 80004cc:	443a      	add	r2, r7
 80004ce:	e7be      	b.n	800044e <__udivmoddi4+0x222>
 80004d0:	45f0      	cmp	r8, lr
 80004d2:	d29d      	bcs.n	8000410 <__udivmoddi4+0x1e4>
 80004d4:	ebbe 0302 	subs.w	r3, lr, r2
 80004d8:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004dc:	3801      	subs	r0, #1
 80004de:	46e1      	mov	r9, ip
 80004e0:	e796      	b.n	8000410 <__udivmoddi4+0x1e4>
 80004e2:	eba7 0909 	sub.w	r9, r7, r9
 80004e6:	4449      	add	r1, r9
 80004e8:	f1a8 0c02 	sub.w	ip, r8, #2
 80004ec:	fbb1 f9fe 	udiv	r9, r1, lr
 80004f0:	fb09 f804 	mul.w	r8, r9, r4
 80004f4:	e7db      	b.n	80004ae <__udivmoddi4+0x282>
 80004f6:	4673      	mov	r3, lr
 80004f8:	e77f      	b.n	80003fa <__udivmoddi4+0x1ce>
 80004fa:	4650      	mov	r0, sl
 80004fc:	e766      	b.n	80003cc <__udivmoddi4+0x1a0>
 80004fe:	4608      	mov	r0, r1
 8000500:	e6fd      	b.n	80002fe <__udivmoddi4+0xd2>
 8000502:	443b      	add	r3, r7
 8000504:	3a02      	subs	r2, #2
 8000506:	e733      	b.n	8000370 <__udivmoddi4+0x144>
 8000508:	f1ac 0c02 	sub.w	ip, ip, #2
 800050c:	443b      	add	r3, r7
 800050e:	e71c      	b.n	800034a <__udivmoddi4+0x11e>
 8000510:	4649      	mov	r1, r9
 8000512:	e79c      	b.n	800044e <__udivmoddi4+0x222>
 8000514:	eba1 0109 	sub.w	r1, r1, r9
 8000518:	46c4      	mov	ip, r8
 800051a:	fbb1 f9fe 	udiv	r9, r1, lr
 800051e:	fb09 f804 	mul.w	r8, r9, r4
 8000522:	e7c4      	b.n	80004ae <__udivmoddi4+0x282>

08000524 <__aeabi_idiv0>:
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop

08000528 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800052c:	f000 fb04 	bl	8000b38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000530:	f000 f816 	bl	8000560 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000534:	f000 f8e2 	bl	80006fc <MX_GPIO_Init>
  MX_TIM6_Init();
 8000538:	f000 f882 	bl	8000640 <MX_TIM6_Init>
  MX_USART1_UART_Init();
 800053c:	f000 f8b4 	bl	80006a8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim6);
 8000540:	4805      	ldr	r0, [pc, #20]	@ (8000558 <main+0x30>)
 8000542:	f001 fc2d 	bl	8001da0 <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    checkHold(&leftMouse);
 8000546:	4805      	ldr	r0, [pc, #20]	@ (800055c <main+0x34>)
 8000548:	f000 f948 	bl	80007dc <checkHold>
    HAL_Delay(1); // Small delay to prevent busy-waiting
 800054c:	2001      	movs	r0, #1
 800054e:	f000 fb65 	bl	8000c1c <HAL_Delay>
    checkHold(&leftMouse);
 8000552:	bf00      	nop
 8000554:	e7f7      	b.n	8000546 <main+0x1e>
 8000556:	bf00      	nop
 8000558:	20000098 	.word	0x20000098
 800055c:	20000000 	.word	0x20000000

08000560 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b094      	sub	sp, #80	@ 0x50
 8000564:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000566:	f107 0320 	add.w	r3, r7, #32
 800056a:	2230      	movs	r2, #48	@ 0x30
 800056c:	2100      	movs	r1, #0
 800056e:	4618      	mov	r0, r3
 8000570:	f002 fef6 	bl	8003360 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000574:	f107 030c 	add.w	r3, r7, #12
 8000578:	2200      	movs	r2, #0
 800057a:	601a      	str	r2, [r3, #0]
 800057c:	605a      	str	r2, [r3, #4]
 800057e:	609a      	str	r2, [r3, #8]
 8000580:	60da      	str	r2, [r3, #12]
 8000582:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000584:	2300      	movs	r3, #0
 8000586:	60bb      	str	r3, [r7, #8]
 8000588:	4b2b      	ldr	r3, [pc, #172]	@ (8000638 <SystemClock_Config+0xd8>)
 800058a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800058c:	4a2a      	ldr	r2, [pc, #168]	@ (8000638 <SystemClock_Config+0xd8>)
 800058e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000592:	6413      	str	r3, [r2, #64]	@ 0x40
 8000594:	4b28      	ldr	r3, [pc, #160]	@ (8000638 <SystemClock_Config+0xd8>)
 8000596:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000598:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800059c:	60bb      	str	r3, [r7, #8]
 800059e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005a0:	2300      	movs	r3, #0
 80005a2:	607b      	str	r3, [r7, #4]
 80005a4:	4b25      	ldr	r3, [pc, #148]	@ (800063c <SystemClock_Config+0xdc>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	4a24      	ldr	r2, [pc, #144]	@ (800063c <SystemClock_Config+0xdc>)
 80005aa:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80005ae:	6013      	str	r3, [r2, #0]
 80005b0:	4b22      	ldr	r3, [pc, #136]	@ (800063c <SystemClock_Config+0xdc>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80005b8:	607b      	str	r3, [r7, #4]
 80005ba:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005bc:	2301      	movs	r3, #1
 80005be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005c0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80005c4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005c6:	2302      	movs	r3, #2
 80005c8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005ca:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80005ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 80005d0:	230f      	movs	r3, #15
 80005d2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 80005d4:	23d8      	movs	r3, #216	@ 0xd8
 80005d6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005d8:	2302      	movs	r3, #2
 80005da:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80005dc:	2304      	movs	r3, #4
 80005de:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005e0:	f107 0320 	add.w	r3, r7, #32
 80005e4:	4618      	mov	r0, r3
 80005e6:	f000 ff33 	bl	8001450 <HAL_RCC_OscConfig>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d001      	beq.n	80005f4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005f0:	f000 f8ee 	bl	80007d0 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80005f4:	f000 fedc 	bl	80013b0 <HAL_PWREx_EnableOverDrive>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d001      	beq.n	8000602 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80005fe:	f000 f8e7 	bl	80007d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000602:	230f      	movs	r3, #15
 8000604:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000606:	2302      	movs	r3, #2
 8000608:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800060a:	2300      	movs	r3, #0
 800060c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800060e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000612:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000614:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000618:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800061a:	f107 030c 	add.w	r3, r7, #12
 800061e:	2105      	movs	r1, #5
 8000620:	4618      	mov	r0, r3
 8000622:	f001 f98d 	bl	8001940 <HAL_RCC_ClockConfig>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d001      	beq.n	8000630 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 800062c:	f000 f8d0 	bl	80007d0 <Error_Handler>
  }
}
 8000630:	bf00      	nop
 8000632:	3750      	adds	r7, #80	@ 0x50
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}
 8000638:	40023800 	.word	0x40023800
 800063c:	40007000 	.word	0x40007000

08000640 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b082      	sub	sp, #8
 8000644:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000646:	463b      	mov	r3, r7
 8000648:	2200      	movs	r2, #0
 800064a:	601a      	str	r2, [r3, #0]
 800064c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800064e:	4b14      	ldr	r3, [pc, #80]	@ (80006a0 <MX_TIM6_Init+0x60>)
 8000650:	4a14      	ldr	r2, [pc, #80]	@ (80006a4 <MX_TIM6_Init+0x64>)
 8000652:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 89;
 8000654:	4b12      	ldr	r3, [pc, #72]	@ (80006a0 <MX_TIM6_Init+0x60>)
 8000656:	2259      	movs	r2, #89	@ 0x59
 8000658:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800065a:	4b11      	ldr	r3, [pc, #68]	@ (80006a0 <MX_TIM6_Init+0x60>)
 800065c:	2200      	movs	r2, #0
 800065e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 99;
 8000660:	4b0f      	ldr	r3, [pc, #60]	@ (80006a0 <MX_TIM6_Init+0x60>)
 8000662:	2263      	movs	r2, #99	@ 0x63
 8000664:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000666:	4b0e      	ldr	r3, [pc, #56]	@ (80006a0 <MX_TIM6_Init+0x60>)
 8000668:	2200      	movs	r2, #0
 800066a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800066c:	480c      	ldr	r0, [pc, #48]	@ (80006a0 <MX_TIM6_Init+0x60>)
 800066e:	f001 fb47 	bl	8001d00 <HAL_TIM_Base_Init>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <MX_TIM6_Init+0x3c>
  {
    Error_Handler();
 8000678:	f000 f8aa 	bl	80007d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800067c:	2300      	movs	r3, #0
 800067e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000680:	2300      	movs	r3, #0
 8000682:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000684:	463b      	mov	r3, r7
 8000686:	4619      	mov	r1, r3
 8000688:	4805      	ldr	r0, [pc, #20]	@ (80006a0 <MX_TIM6_Init+0x60>)
 800068a:	f001 fdc1 	bl	8002210 <HAL_TIMEx_MasterConfigSynchronization>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d001      	beq.n	8000698 <MX_TIM6_Init+0x58>
  {
    Error_Handler();
 8000694:	f000 f89c 	bl	80007d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000698:	bf00      	nop
 800069a:	3708      	adds	r7, #8
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	20000098 	.word	0x20000098
 80006a4:	40001000 	.word	0x40001000

080006a8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006ac:	4b11      	ldr	r3, [pc, #68]	@ (80006f4 <MX_USART1_UART_Init+0x4c>)
 80006ae:	4a12      	ldr	r2, [pc, #72]	@ (80006f8 <MX_USART1_UART_Init+0x50>)
 80006b0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80006b2:	4b10      	ldr	r3, [pc, #64]	@ (80006f4 <MX_USART1_UART_Init+0x4c>)
 80006b4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80006b8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006ba:	4b0e      	ldr	r3, [pc, #56]	@ (80006f4 <MX_USART1_UART_Init+0x4c>)
 80006bc:	2200      	movs	r2, #0
 80006be:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80006c0:	4b0c      	ldr	r3, [pc, #48]	@ (80006f4 <MX_USART1_UART_Init+0x4c>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80006c6:	4b0b      	ldr	r3, [pc, #44]	@ (80006f4 <MX_USART1_UART_Init+0x4c>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80006cc:	4b09      	ldr	r3, [pc, #36]	@ (80006f4 <MX_USART1_UART_Init+0x4c>)
 80006ce:	220c      	movs	r2, #12
 80006d0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006d2:	4b08      	ldr	r3, [pc, #32]	@ (80006f4 <MX_USART1_UART_Init+0x4c>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80006d8:	4b06      	ldr	r3, [pc, #24]	@ (80006f4 <MX_USART1_UART_Init+0x4c>)
 80006da:	2200      	movs	r2, #0
 80006dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80006de:	4805      	ldr	r0, [pc, #20]	@ (80006f4 <MX_USART1_UART_Init+0x4c>)
 80006e0:	f001 fe26 	bl	8002330 <HAL_UART_Init>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80006ea:	f000 f871 	bl	80007d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80006ee:	bf00      	nop
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	200000e0 	.word	0x200000e0
 80006f8:	40011000 	.word	0x40011000

080006fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b088      	sub	sp, #32
 8000700:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000702:	f107 030c 	add.w	r3, r7, #12
 8000706:	2200      	movs	r2, #0
 8000708:	601a      	str	r2, [r3, #0]
 800070a:	605a      	str	r2, [r3, #4]
 800070c:	609a      	str	r2, [r3, #8]
 800070e:	60da      	str	r2, [r3, #12]
 8000710:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000712:	2300      	movs	r3, #0
 8000714:	60bb      	str	r3, [r7, #8]
 8000716:	4b2b      	ldr	r3, [pc, #172]	@ (80007c4 <MX_GPIO_Init+0xc8>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800071a:	4a2a      	ldr	r2, [pc, #168]	@ (80007c4 <MX_GPIO_Init+0xc8>)
 800071c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000720:	6313      	str	r3, [r2, #48]	@ 0x30
 8000722:	4b28      	ldr	r3, [pc, #160]	@ (80007c4 <MX_GPIO_Init+0xc8>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000726:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800072a:	60bb      	str	r3, [r7, #8]
 800072c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800072e:	2300      	movs	r3, #0
 8000730:	607b      	str	r3, [r7, #4]
 8000732:	4b24      	ldr	r3, [pc, #144]	@ (80007c4 <MX_GPIO_Init+0xc8>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000736:	4a23      	ldr	r2, [pc, #140]	@ (80007c4 <MX_GPIO_Init+0xc8>)
 8000738:	f043 0301 	orr.w	r3, r3, #1
 800073c:	6313      	str	r3, [r2, #48]	@ 0x30
 800073e:	4b21      	ldr	r3, [pc, #132]	@ (80007c4 <MX_GPIO_Init+0xc8>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000742:	f003 0301 	and.w	r3, r3, #1
 8000746:	607b      	str	r3, [r7, #4]
 8000748:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800074a:	2300      	movs	r3, #0
 800074c:	603b      	str	r3, [r7, #0]
 800074e:	4b1d      	ldr	r3, [pc, #116]	@ (80007c4 <MX_GPIO_Init+0xc8>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000752:	4a1c      	ldr	r2, [pc, #112]	@ (80007c4 <MX_GPIO_Init+0xc8>)
 8000754:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000758:	6313      	str	r3, [r2, #48]	@ 0x30
 800075a:	4b1a      	ldr	r3, [pc, #104]	@ (80007c4 <MX_GPIO_Init+0xc8>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800075e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000762:	603b      	str	r3, [r7, #0]
 8000764:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8000766:	2200      	movs	r2, #0
 8000768:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 800076c:	4816      	ldr	r0, [pc, #88]	@ (80007c8 <MX_GPIO_Init+0xcc>)
 800076e:	f000 fde1 	bl	8001334 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000772:	2301      	movs	r3, #1
 8000774:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000776:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 800077a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077c:	2300      	movs	r3, #0
 800077e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000780:	f107 030c 	add.w	r3, r7, #12
 8000784:	4619      	mov	r1, r3
 8000786:	4811      	ldr	r0, [pc, #68]	@ (80007cc <MX_GPIO_Init+0xd0>)
 8000788:	f000 fc10 	bl	8000fac <HAL_GPIO_Init>

  /*Configure GPIO pins : PG13 PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 800078c:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8000790:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000792:	2301      	movs	r3, #1
 8000794:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000796:	2300      	movs	r3, #0
 8000798:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800079a:	2300      	movs	r3, #0
 800079c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800079e:	f107 030c 	add.w	r3, r7, #12
 80007a2:	4619      	mov	r1, r3
 80007a4:	4808      	ldr	r0, [pc, #32]	@ (80007c8 <MX_GPIO_Init+0xcc>)
 80007a6:	f000 fc01 	bl	8000fac <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80007aa:	2200      	movs	r2, #0
 80007ac:	2100      	movs	r1, #0
 80007ae:	2006      	movs	r0, #6
 80007b0:	f000 fb33 	bl	8000e1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80007b4:	2006      	movs	r0, #6
 80007b6:	f000 fb4c 	bl	8000e52 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80007ba:	bf00      	nop
 80007bc:	3720      	adds	r7, #32
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	40023800 	.word	0x40023800
 80007c8:	40021800 	.word	0x40021800
 80007cc:	40020000 	.word	0x40020000

080007d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007d4:	b672      	cpsid	i
}
 80007d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007d8:	bf00      	nop
 80007da:	e7fd      	b.n	80007d8 <Error_Handler+0x8>

080007dc <checkHold>:
    .holdTime = -1,  // Start with -1 to indicate no hold time
    .isHolding = 0
};

extern UART_HandleTypeDef huart1;
void checkHold(PressAndHold* pah){
 80007dc:	b590      	push	{r4, r7, lr}
 80007de:	b083      	sub	sp, #12
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
    if (HAL_GPIO_ReadPin(pah->port, pah->pin) == GPIO_PIN_SET) {
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	681a      	ldr	r2, [r3, #0]
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	889b      	ldrh	r3, [r3, #4]
 80007ec:	4619      	mov	r1, r3
 80007ee:	4610      	mov	r0, r2
 80007f0:	f000 fd88 	bl	8001304 <HAL_GPIO_ReadPin>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b01      	cmp	r3, #1
 80007f8:	d120      	bne.n	800083c <checkHold+0x60>
        if (!pah->isHolding && pah->holdTime >= minHoldTime) {
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
 8000800:	2b00      	cmp	r3, #0
 8000802:	d11b      	bne.n	800083c <checkHold+0x60>
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8000808:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 800080c:	4293      	cmp	r3, r2
 800080e:	dd15      	ble.n	800083c <checkHold+0x60>
            pah->isHolding = 1;
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	2201      	movs	r2, #1
 8000814:	f883 206c 	strb.w	r2, [r3, #108]	@ 0x6c
            HAL_UART_Transmit(&huart1, (uint8_t*)pah->holdMes, strlen(pah->holdMes), 10);
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	f103 0426 	add.w	r4, r3, #38	@ 0x26
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	3326      	adds	r3, #38	@ 0x26
 8000822:	4618      	mov	r0, r3
 8000824:	f7ff fce2 	bl	80001ec <strlen>
 8000828:	4603      	mov	r3, r0
 800082a:	b29a      	uxth	r2, r3
 800082c:	230a      	movs	r3, #10
 800082e:	4621      	mov	r1, r4
 8000830:	4804      	ldr	r0, [pc, #16]	@ (8000844 <checkHold+0x68>)
 8000832:	f001 fdcd 	bl	80023d0 <HAL_UART_Transmit>
            HAL_Delay(1);
 8000836:	2001      	movs	r0, #1
 8000838:	f000 f9f0 	bl	8000c1c <HAL_Delay>
        } 
    }       
}
 800083c:	bf00      	nop
 800083e:	370c      	adds	r7, #12
 8000840:	46bd      	mov	sp, r7
 8000842:	bd90      	pop	{r4, r7, pc}
 8000844:	200000e0 	.word	0x200000e0

08000848 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000848:	b480      	push	{r7}
 800084a:	b083      	sub	sp, #12
 800084c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800084e:	2300      	movs	r3, #0
 8000850:	607b      	str	r3, [r7, #4]
 8000852:	4b10      	ldr	r3, [pc, #64]	@ (8000894 <HAL_MspInit+0x4c>)
 8000854:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000856:	4a0f      	ldr	r2, [pc, #60]	@ (8000894 <HAL_MspInit+0x4c>)
 8000858:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800085c:	6453      	str	r3, [r2, #68]	@ 0x44
 800085e:	4b0d      	ldr	r3, [pc, #52]	@ (8000894 <HAL_MspInit+0x4c>)
 8000860:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000862:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000866:	607b      	str	r3, [r7, #4]
 8000868:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800086a:	2300      	movs	r3, #0
 800086c:	603b      	str	r3, [r7, #0]
 800086e:	4b09      	ldr	r3, [pc, #36]	@ (8000894 <HAL_MspInit+0x4c>)
 8000870:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000872:	4a08      	ldr	r2, [pc, #32]	@ (8000894 <HAL_MspInit+0x4c>)
 8000874:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000878:	6413      	str	r3, [r2, #64]	@ 0x40
 800087a:	4b06      	ldr	r3, [pc, #24]	@ (8000894 <HAL_MspInit+0x4c>)
 800087c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800087e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000882:	603b      	str	r3, [r7, #0]
 8000884:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000886:	bf00      	nop
 8000888:	370c      	adds	r7, #12
 800088a:	46bd      	mov	sp, r7
 800088c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000890:	4770      	bx	lr
 8000892:	bf00      	nop
 8000894:	40023800 	.word	0x40023800

08000898 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b084      	sub	sp, #16
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	4a0e      	ldr	r2, [pc, #56]	@ (80008e0 <HAL_TIM_Base_MspInit+0x48>)
 80008a6:	4293      	cmp	r3, r2
 80008a8:	d115      	bne.n	80008d6 <HAL_TIM_Base_MspInit+0x3e>
  {
    /* USER CODE BEGIN TIM6_MspInit 0 */

    /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80008aa:	2300      	movs	r3, #0
 80008ac:	60fb      	str	r3, [r7, #12]
 80008ae:	4b0d      	ldr	r3, [pc, #52]	@ (80008e4 <HAL_TIM_Base_MspInit+0x4c>)
 80008b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008b2:	4a0c      	ldr	r2, [pc, #48]	@ (80008e4 <HAL_TIM_Base_MspInit+0x4c>)
 80008b4:	f043 0310 	orr.w	r3, r3, #16
 80008b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80008ba:	4b0a      	ldr	r3, [pc, #40]	@ (80008e4 <HAL_TIM_Base_MspInit+0x4c>)
 80008bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008be:	f003 0310 	and.w	r3, r3, #16
 80008c2:	60fb      	str	r3, [r7, #12]
 80008c4:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80008c6:	2200      	movs	r2, #0
 80008c8:	2100      	movs	r1, #0
 80008ca:	2036      	movs	r0, #54	@ 0x36
 80008cc:	f000 faa5 	bl	8000e1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80008d0:	2036      	movs	r0, #54	@ 0x36
 80008d2:	f000 fabe 	bl	8000e52 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM6_MspInit 1 */

  }

}
 80008d6:	bf00      	nop
 80008d8:	3710      	adds	r7, #16
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	40001000 	.word	0x40001000
 80008e4:	40023800 	.word	0x40023800

080008e8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b08a      	sub	sp, #40	@ 0x28
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f0:	f107 0314 	add.w	r3, r7, #20
 80008f4:	2200      	movs	r2, #0
 80008f6:	601a      	str	r2, [r3, #0]
 80008f8:	605a      	str	r2, [r3, #4]
 80008fa:	609a      	str	r2, [r3, #8]
 80008fc:	60da      	str	r2, [r3, #12]
 80008fe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	4a1d      	ldr	r2, [pc, #116]	@ (800097c <HAL_UART_MspInit+0x94>)
 8000906:	4293      	cmp	r3, r2
 8000908:	d134      	bne.n	8000974 <HAL_UART_MspInit+0x8c>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800090a:	2300      	movs	r3, #0
 800090c:	613b      	str	r3, [r7, #16]
 800090e:	4b1c      	ldr	r3, [pc, #112]	@ (8000980 <HAL_UART_MspInit+0x98>)
 8000910:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000912:	4a1b      	ldr	r2, [pc, #108]	@ (8000980 <HAL_UART_MspInit+0x98>)
 8000914:	f043 0310 	orr.w	r3, r3, #16
 8000918:	6453      	str	r3, [r2, #68]	@ 0x44
 800091a:	4b19      	ldr	r3, [pc, #100]	@ (8000980 <HAL_UART_MspInit+0x98>)
 800091c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800091e:	f003 0310 	and.w	r3, r3, #16
 8000922:	613b      	str	r3, [r7, #16]
 8000924:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000926:	2300      	movs	r3, #0
 8000928:	60fb      	str	r3, [r7, #12]
 800092a:	4b15      	ldr	r3, [pc, #84]	@ (8000980 <HAL_UART_MspInit+0x98>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800092e:	4a14      	ldr	r2, [pc, #80]	@ (8000980 <HAL_UART_MspInit+0x98>)
 8000930:	f043 0301 	orr.w	r3, r3, #1
 8000934:	6313      	str	r3, [r2, #48]	@ 0x30
 8000936:	4b12      	ldr	r3, [pc, #72]	@ (8000980 <HAL_UART_MspInit+0x98>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800093a:	f003 0301 	and.w	r3, r3, #1
 800093e:	60fb      	str	r3, [r7, #12]
 8000940:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000942:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000946:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000948:	2302      	movs	r3, #2
 800094a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094c:	2300      	movs	r3, #0
 800094e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000950:	2303      	movs	r3, #3
 8000952:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000954:	2307      	movs	r3, #7
 8000956:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000958:	f107 0314 	add.w	r3, r7, #20
 800095c:	4619      	mov	r1, r3
 800095e:	4809      	ldr	r0, [pc, #36]	@ (8000984 <HAL_UART_MspInit+0x9c>)
 8000960:	f000 fb24 	bl	8000fac <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000964:	2200      	movs	r2, #0
 8000966:	2100      	movs	r1, #0
 8000968:	2025      	movs	r0, #37	@ 0x25
 800096a:	f000 fa56 	bl	8000e1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800096e:	2025      	movs	r0, #37	@ 0x25
 8000970:	f000 fa6f 	bl	8000e52 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8000974:	bf00      	nop
 8000976:	3728      	adds	r7, #40	@ 0x28
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}
 800097c:	40011000 	.word	0x40011000
 8000980:	40023800 	.word	0x40023800
 8000984:	40020000 	.word	0x40020000

08000988 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800098c:	bf00      	nop
 800098e:	e7fd      	b.n	800098c <NMI_Handler+0x4>

08000990 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000994:	bf00      	nop
 8000996:	e7fd      	b.n	8000994 <HardFault_Handler+0x4>

08000998 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800099c:	bf00      	nop
 800099e:	e7fd      	b.n	800099c <MemManage_Handler+0x4>

080009a0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009a4:	bf00      	nop
 80009a6:	e7fd      	b.n	80009a4 <BusFault_Handler+0x4>

080009a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009ac:	bf00      	nop
 80009ae:	e7fd      	b.n	80009ac <UsageFault_Handler+0x4>

080009b0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009b4:	bf00      	nop
 80009b6:	46bd      	mov	sp, r7
 80009b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009bc:	4770      	bx	lr

080009be <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009be:	b480      	push	{r7}
 80009c0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009c2:	bf00      	nop
 80009c4:	46bd      	mov	sp, r7
 80009c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ca:	4770      	bx	lr

080009cc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009d0:	bf00      	nop
 80009d2:	46bd      	mov	sp, r7
 80009d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d8:	4770      	bx	lr

080009da <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009da:	b580      	push	{r7, lr}
 80009dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009de:	f000 f8fd 	bl	8000bdc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009e2:	bf00      	nop
 80009e4:	bd80      	pop	{r7, pc}
	...

080009e8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
  if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_SET) {
 80009ec:	2101      	movs	r1, #1
 80009ee:	4820      	ldr	r0, [pc, #128]	@ (8000a70 <EXTI0_IRQHandler+0x88>)
 80009f0:	f000 fc88 	bl	8001304 <HAL_GPIO_ReadPin>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b01      	cmp	r3, #1
 80009f8:	d107      	bne.n	8000a0a <EXTI0_IRQHandler+0x22>
      // Nút được nhấn xuống
      leftMouse.holdTime = 0;
 80009fa:	4b1e      	ldr	r3, [pc, #120]	@ (8000a74 <EXTI0_IRQHandler+0x8c>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	669a      	str	r2, [r3, #104]	@ 0x68
      leftMouse.isHolding = 0;
 8000a00:	4b1c      	ldr	r3, [pc, #112]	@ (8000a74 <EXTI0_IRQHandler+0x8c>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	f883 206c 	strb.w	r2, [r3, #108]	@ 0x6c
 8000a08:	e02d      	b.n	8000a66 <EXTI0_IRQHandler+0x7e>
  } else {
      // Nút được thả ra
      if (leftMouse.isHolding) {
 8000a0a:	4b1a      	ldr	r3, [pc, #104]	@ (8000a74 <EXTI0_IRQHandler+0x8c>)
 8000a0c:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d00d      	beq.n	8000a30 <EXTI0_IRQHandler+0x48>
          // Nếu trước đó đã giữ lâu → gửi release
          HAL_UART_Transmit(&huart1, (uint8_t*)leftMouse.releaseMes, strlen(leftMouse.releaseMes), 10);
 8000a14:	4818      	ldr	r0, [pc, #96]	@ (8000a78 <EXTI0_IRQHandler+0x90>)
 8000a16:	f7ff fbe9 	bl	80001ec <strlen>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	b29a      	uxth	r2, r3
 8000a1e:	230a      	movs	r3, #10
 8000a20:	4915      	ldr	r1, [pc, #84]	@ (8000a78 <EXTI0_IRQHandler+0x90>)
 8000a22:	4816      	ldr	r0, [pc, #88]	@ (8000a7c <EXTI0_IRQHandler+0x94>)
 8000a24:	f001 fcd4 	bl	80023d0 <HAL_UART_Transmit>
          HAL_Delay(1);
 8000a28:	2001      	movs	r0, #1
 8000a2a:	f000 f8f7 	bl	8000c1c <HAL_Delay>
 8000a2e:	e012      	b.n	8000a56 <EXTI0_IRQHandler+0x6e>
      } else if (leftMouse.holdTime < minHoldTime) {
 8000a30:	4b10      	ldr	r3, [pc, #64]	@ (8000a74 <EXTI0_IRQHandler+0x8c>)
 8000a32:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8000a34:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 8000a38:	4293      	cmp	r3, r2
 8000a3a:	dc0c      	bgt.n	8000a56 <EXTI0_IRQHandler+0x6e>
          // Nếu nhấn ngắn → click
          HAL_UART_Transmit(&huart1, (uint8_t*)leftMouse.clickMes, strlen(leftMouse.clickMes), 10);
 8000a3c:	4810      	ldr	r0, [pc, #64]	@ (8000a80 <EXTI0_IRQHandler+0x98>)
 8000a3e:	f7ff fbd5 	bl	80001ec <strlen>
 8000a42:	4603      	mov	r3, r0
 8000a44:	b29a      	uxth	r2, r3
 8000a46:	230a      	movs	r3, #10
 8000a48:	490d      	ldr	r1, [pc, #52]	@ (8000a80 <EXTI0_IRQHandler+0x98>)
 8000a4a:	480c      	ldr	r0, [pc, #48]	@ (8000a7c <EXTI0_IRQHandler+0x94>)
 8000a4c:	f001 fcc0 	bl	80023d0 <HAL_UART_Transmit>
          HAL_Delay(1);
 8000a50:	2001      	movs	r0, #1
 8000a52:	f000 f8e3 	bl	8000c1c <HAL_Delay>
      }
      
      // Reset lại trạng thái
      leftMouse.isHolding = 0;
 8000a56:	4b07      	ldr	r3, [pc, #28]	@ (8000a74 <EXTI0_IRQHandler+0x8c>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	f883 206c 	strb.w	r2, [r3, #108]	@ 0x6c
      leftMouse.holdTime = -1; 
 8000a5e:	4b05      	ldr	r3, [pc, #20]	@ (8000a74 <EXTI0_IRQHandler+0x8c>)
 8000a60:	f04f 32ff 	mov.w	r2, #4294967295
 8000a64:	669a      	str	r2, [r3, #104]	@ 0x68
  }
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000a66:	2001      	movs	r0, #1
 8000a68:	f000 fc7e 	bl	8001368 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000a6c:	bf00      	nop
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	40020000 	.word	0x40020000
 8000a74:	20000000 	.word	0x20000000
 8000a78:	20000046 	.word	0x20000046
 8000a7c:	200000e0 	.word	0x200000e0
 8000a80:	20000006 	.word	0x20000006

08000a84 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000a88:	4802      	ldr	r0, [pc, #8]	@ (8000a94 <USART1_IRQHandler+0x10>)
 8000a8a:	f001 fd2d 	bl	80024e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000a8e:	bf00      	nop
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	200000e0 	.word	0x200000e0

08000a98 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */
  if (leftMouse.holdTime >= 0) {
 8000a9c:	4b06      	ldr	r3, [pc, #24]	@ (8000ab8 <TIM6_DAC_IRQHandler+0x20>)
 8000a9e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	db04      	blt.n	8000aae <TIM6_DAC_IRQHandler+0x16>
    leftMouse.holdTime += 1; // Increment hold time every 0.1 ms
 8000aa4:	4b04      	ldr	r3, [pc, #16]	@ (8000ab8 <TIM6_DAC_IRQHandler+0x20>)
 8000aa6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8000aa8:	3301      	adds	r3, #1
 8000aaa:	4a03      	ldr	r2, [pc, #12]	@ (8000ab8 <TIM6_DAC_IRQHandler+0x20>)
 8000aac:	6693      	str	r3, [r2, #104]	@ 0x68
  }
  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000aae:	4803      	ldr	r0, [pc, #12]	@ (8000abc <TIM6_DAC_IRQHandler+0x24>)
 8000ab0:	f001 f9e6 	bl	8001e80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000ab4:	bf00      	nop
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	20000000 	.word	0x20000000
 8000abc:	20000098 	.word	0x20000098

08000ac0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ac4:	4b06      	ldr	r3, [pc, #24]	@ (8000ae0 <SystemInit+0x20>)
 8000ac6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000aca:	4a05      	ldr	r2, [pc, #20]	@ (8000ae0 <SystemInit+0x20>)
 8000acc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ad0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ad4:	bf00      	nop
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop
 8000ae0:	e000ed00 	.word	0xe000ed00

08000ae4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000ae4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b1c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000ae8:	f7ff ffea 	bl	8000ac0 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000aec:	480c      	ldr	r0, [pc, #48]	@ (8000b20 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000aee:	490d      	ldr	r1, [pc, #52]	@ (8000b24 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000af0:	4a0d      	ldr	r2, [pc, #52]	@ (8000b28 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000af2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000af4:	e002      	b.n	8000afc <LoopCopyDataInit>

08000af6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000af6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000af8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000afa:	3304      	adds	r3, #4

08000afc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000afc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000afe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b00:	d3f9      	bcc.n	8000af6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b02:	4a0a      	ldr	r2, [pc, #40]	@ (8000b2c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b04:	4c0a      	ldr	r4, [pc, #40]	@ (8000b30 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b08:	e001      	b.n	8000b0e <LoopFillZerobss>

08000b0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b0c:	3204      	adds	r2, #4

08000b0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b10:	d3fb      	bcc.n	8000b0a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000b12:	f002 fc2d 	bl	8003370 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b16:	f7ff fd07 	bl	8000528 <main>
  bx  lr    
 8000b1a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000b1c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000b20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b24:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8000b28:	080033f8 	.word	0x080033f8
  ldr r2, =_sbss
 8000b2c:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8000b30:	2000012c 	.word	0x2000012c

08000b34 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b34:	e7fe      	b.n	8000b34 <ADC_IRQHandler>
	...

08000b38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b3c:	4b0e      	ldr	r3, [pc, #56]	@ (8000b78 <HAL_Init+0x40>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	4a0d      	ldr	r2, [pc, #52]	@ (8000b78 <HAL_Init+0x40>)
 8000b42:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000b46:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b48:	4b0b      	ldr	r3, [pc, #44]	@ (8000b78 <HAL_Init+0x40>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	4a0a      	ldr	r2, [pc, #40]	@ (8000b78 <HAL_Init+0x40>)
 8000b4e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000b52:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b54:	4b08      	ldr	r3, [pc, #32]	@ (8000b78 <HAL_Init+0x40>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	4a07      	ldr	r2, [pc, #28]	@ (8000b78 <HAL_Init+0x40>)
 8000b5a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000b5e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b60:	2003      	movs	r0, #3
 8000b62:	f000 f94f 	bl	8000e04 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b66:	200f      	movs	r0, #15
 8000b68:	f000 f808 	bl	8000b7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b6c:	f7ff fe6c 	bl	8000848 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b70:	2300      	movs	r3, #0
}
 8000b72:	4618      	mov	r0, r3
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	40023c00 	.word	0x40023c00

08000b7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b082      	sub	sp, #8
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b84:	4b12      	ldr	r3, [pc, #72]	@ (8000bd0 <HAL_InitTick+0x54>)
 8000b86:	681a      	ldr	r2, [r3, #0]
 8000b88:	4b12      	ldr	r3, [pc, #72]	@ (8000bd4 <HAL_InitTick+0x58>)
 8000b8a:	781b      	ldrb	r3, [r3, #0]
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b92:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b96:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f000 f967 	bl	8000e6e <HAL_SYSTICK_Config>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d001      	beq.n	8000baa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	e00e      	b.n	8000bc8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	2b0f      	cmp	r3, #15
 8000bae:	d80a      	bhi.n	8000bc6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	6879      	ldr	r1, [r7, #4]
 8000bb4:	f04f 30ff 	mov.w	r0, #4294967295
 8000bb8:	f000 f92f 	bl	8000e1a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bbc:	4a06      	ldr	r2, [pc, #24]	@ (8000bd8 <HAL_InitTick+0x5c>)
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	e000      	b.n	8000bc8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bc6:	2301      	movs	r3, #1
}
 8000bc8:	4618      	mov	r0, r3
 8000bca:	3708      	adds	r7, #8
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	20000070 	.word	0x20000070
 8000bd4:	20000078 	.word	0x20000078
 8000bd8:	20000074 	.word	0x20000074

08000bdc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000be0:	4b06      	ldr	r3, [pc, #24]	@ (8000bfc <HAL_IncTick+0x20>)
 8000be2:	781b      	ldrb	r3, [r3, #0]
 8000be4:	461a      	mov	r2, r3
 8000be6:	4b06      	ldr	r3, [pc, #24]	@ (8000c00 <HAL_IncTick+0x24>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	4413      	add	r3, r2
 8000bec:	4a04      	ldr	r2, [pc, #16]	@ (8000c00 <HAL_IncTick+0x24>)
 8000bee:	6013      	str	r3, [r2, #0]
}
 8000bf0:	bf00      	nop
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop
 8000bfc:	20000078 	.word	0x20000078
 8000c00:	20000128 	.word	0x20000128

08000c04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  return uwTick;
 8000c08:	4b03      	ldr	r3, [pc, #12]	@ (8000c18 <HAL_GetTick+0x14>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
}
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop
 8000c18:	20000128 	.word	0x20000128

08000c1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b084      	sub	sp, #16
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c24:	f7ff ffee 	bl	8000c04 <HAL_GetTick>
 8000c28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c2e:	68fb      	ldr	r3, [r7, #12]
 8000c30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c34:	d005      	beq.n	8000c42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c36:	4b0a      	ldr	r3, [pc, #40]	@ (8000c60 <HAL_Delay+0x44>)
 8000c38:	781b      	ldrb	r3, [r3, #0]
 8000c3a:	461a      	mov	r2, r3
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	4413      	add	r3, r2
 8000c40:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000c42:	bf00      	nop
 8000c44:	f7ff ffde 	bl	8000c04 <HAL_GetTick>
 8000c48:	4602      	mov	r2, r0
 8000c4a:	68bb      	ldr	r3, [r7, #8]
 8000c4c:	1ad3      	subs	r3, r2, r3
 8000c4e:	68fa      	ldr	r2, [r7, #12]
 8000c50:	429a      	cmp	r2, r3
 8000c52:	d8f7      	bhi.n	8000c44 <HAL_Delay+0x28>
  {
  }
}
 8000c54:	bf00      	nop
 8000c56:	bf00      	nop
 8000c58:	3710      	adds	r7, #16
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	20000078 	.word	0x20000078

08000c64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c64:	b480      	push	{r7}
 8000c66:	b085      	sub	sp, #20
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	f003 0307 	and.w	r3, r3, #7
 8000c72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c74:	4b0c      	ldr	r3, [pc, #48]	@ (8000ca8 <__NVIC_SetPriorityGrouping+0x44>)
 8000c76:	68db      	ldr	r3, [r3, #12]
 8000c78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c7a:	68ba      	ldr	r2, [r7, #8]
 8000c7c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c80:	4013      	ands	r3, r2
 8000c82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c88:	68bb      	ldr	r3, [r7, #8]
 8000c8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c8c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c90:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c96:	4a04      	ldr	r2, [pc, #16]	@ (8000ca8 <__NVIC_SetPriorityGrouping+0x44>)
 8000c98:	68bb      	ldr	r3, [r7, #8]
 8000c9a:	60d3      	str	r3, [r2, #12]
}
 8000c9c:	bf00      	nop
 8000c9e:	3714      	adds	r7, #20
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca6:	4770      	bx	lr
 8000ca8:	e000ed00 	.word	0xe000ed00

08000cac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cb0:	4b04      	ldr	r3, [pc, #16]	@ (8000cc4 <__NVIC_GetPriorityGrouping+0x18>)
 8000cb2:	68db      	ldr	r3, [r3, #12]
 8000cb4:	0a1b      	lsrs	r3, r3, #8
 8000cb6:	f003 0307 	and.w	r3, r3, #7
}
 8000cba:	4618      	mov	r0, r3
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc2:	4770      	bx	lr
 8000cc4:	e000ed00 	.word	0xe000ed00

08000cc8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b083      	sub	sp, #12
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	4603      	mov	r3, r0
 8000cd0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	db0b      	blt.n	8000cf2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cda:	79fb      	ldrb	r3, [r7, #7]
 8000cdc:	f003 021f 	and.w	r2, r3, #31
 8000ce0:	4907      	ldr	r1, [pc, #28]	@ (8000d00 <__NVIC_EnableIRQ+0x38>)
 8000ce2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce6:	095b      	lsrs	r3, r3, #5
 8000ce8:	2001      	movs	r0, #1
 8000cea:	fa00 f202 	lsl.w	r2, r0, r2
 8000cee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000cf2:	bf00      	nop
 8000cf4:	370c      	adds	r7, #12
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr
 8000cfe:	bf00      	nop
 8000d00:	e000e100 	.word	0xe000e100

08000d04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b083      	sub	sp, #12
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	6039      	str	r1, [r7, #0]
 8000d0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	db0a      	blt.n	8000d2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	b2da      	uxtb	r2, r3
 8000d1c:	490c      	ldr	r1, [pc, #48]	@ (8000d50 <__NVIC_SetPriority+0x4c>)
 8000d1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d22:	0112      	lsls	r2, r2, #4
 8000d24:	b2d2      	uxtb	r2, r2
 8000d26:	440b      	add	r3, r1
 8000d28:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d2c:	e00a      	b.n	8000d44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	b2da      	uxtb	r2, r3
 8000d32:	4908      	ldr	r1, [pc, #32]	@ (8000d54 <__NVIC_SetPriority+0x50>)
 8000d34:	79fb      	ldrb	r3, [r7, #7]
 8000d36:	f003 030f 	and.w	r3, r3, #15
 8000d3a:	3b04      	subs	r3, #4
 8000d3c:	0112      	lsls	r2, r2, #4
 8000d3e:	b2d2      	uxtb	r2, r2
 8000d40:	440b      	add	r3, r1
 8000d42:	761a      	strb	r2, [r3, #24]
}
 8000d44:	bf00      	nop
 8000d46:	370c      	adds	r7, #12
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4e:	4770      	bx	lr
 8000d50:	e000e100 	.word	0xe000e100
 8000d54:	e000ed00 	.word	0xe000ed00

08000d58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	b089      	sub	sp, #36	@ 0x24
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	60f8      	str	r0, [r7, #12]
 8000d60:	60b9      	str	r1, [r7, #8]
 8000d62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	f003 0307 	and.w	r3, r3, #7
 8000d6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d6c:	69fb      	ldr	r3, [r7, #28]
 8000d6e:	f1c3 0307 	rsb	r3, r3, #7
 8000d72:	2b04      	cmp	r3, #4
 8000d74:	bf28      	it	cs
 8000d76:	2304      	movcs	r3, #4
 8000d78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d7a:	69fb      	ldr	r3, [r7, #28]
 8000d7c:	3304      	adds	r3, #4
 8000d7e:	2b06      	cmp	r3, #6
 8000d80:	d902      	bls.n	8000d88 <NVIC_EncodePriority+0x30>
 8000d82:	69fb      	ldr	r3, [r7, #28]
 8000d84:	3b03      	subs	r3, #3
 8000d86:	e000      	b.n	8000d8a <NVIC_EncodePriority+0x32>
 8000d88:	2300      	movs	r3, #0
 8000d8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d8c:	f04f 32ff 	mov.w	r2, #4294967295
 8000d90:	69bb      	ldr	r3, [r7, #24]
 8000d92:	fa02 f303 	lsl.w	r3, r2, r3
 8000d96:	43da      	mvns	r2, r3
 8000d98:	68bb      	ldr	r3, [r7, #8]
 8000d9a:	401a      	ands	r2, r3
 8000d9c:	697b      	ldr	r3, [r7, #20]
 8000d9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000da0:	f04f 31ff 	mov.w	r1, #4294967295
 8000da4:	697b      	ldr	r3, [r7, #20]
 8000da6:	fa01 f303 	lsl.w	r3, r1, r3
 8000daa:	43d9      	mvns	r1, r3
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000db0:	4313      	orrs	r3, r2
         );
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	3724      	adds	r7, #36	@ 0x24
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr
	...

08000dc0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	3b01      	subs	r3, #1
 8000dcc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000dd0:	d301      	bcc.n	8000dd6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	e00f      	b.n	8000df6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dd6:	4a0a      	ldr	r2, [pc, #40]	@ (8000e00 <SysTick_Config+0x40>)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	3b01      	subs	r3, #1
 8000ddc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dde:	210f      	movs	r1, #15
 8000de0:	f04f 30ff 	mov.w	r0, #4294967295
 8000de4:	f7ff ff8e 	bl	8000d04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000de8:	4b05      	ldr	r3, [pc, #20]	@ (8000e00 <SysTick_Config+0x40>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dee:	4b04      	ldr	r3, [pc, #16]	@ (8000e00 <SysTick_Config+0x40>)
 8000df0:	2207      	movs	r2, #7
 8000df2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000df4:	2300      	movs	r3, #0
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	3708      	adds	r7, #8
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	e000e010 	.word	0xe000e010

08000e04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b082      	sub	sp, #8
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e0c:	6878      	ldr	r0, [r7, #4]
 8000e0e:	f7ff ff29 	bl	8000c64 <__NVIC_SetPriorityGrouping>
}
 8000e12:	bf00      	nop
 8000e14:	3708      	adds	r7, #8
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}

08000e1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e1a:	b580      	push	{r7, lr}
 8000e1c:	b086      	sub	sp, #24
 8000e1e:	af00      	add	r7, sp, #0
 8000e20:	4603      	mov	r3, r0
 8000e22:	60b9      	str	r1, [r7, #8]
 8000e24:	607a      	str	r2, [r7, #4]
 8000e26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e2c:	f7ff ff3e 	bl	8000cac <__NVIC_GetPriorityGrouping>
 8000e30:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e32:	687a      	ldr	r2, [r7, #4]
 8000e34:	68b9      	ldr	r1, [r7, #8]
 8000e36:	6978      	ldr	r0, [r7, #20]
 8000e38:	f7ff ff8e 	bl	8000d58 <NVIC_EncodePriority>
 8000e3c:	4602      	mov	r2, r0
 8000e3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e42:	4611      	mov	r1, r2
 8000e44:	4618      	mov	r0, r3
 8000e46:	f7ff ff5d 	bl	8000d04 <__NVIC_SetPriority>
}
 8000e4a:	bf00      	nop
 8000e4c:	3718      	adds	r7, #24
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}

08000e52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e52:	b580      	push	{r7, lr}
 8000e54:	b082      	sub	sp, #8
 8000e56:	af00      	add	r7, sp, #0
 8000e58:	4603      	mov	r3, r0
 8000e5a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e60:	4618      	mov	r0, r3
 8000e62:	f7ff ff31 	bl	8000cc8 <__NVIC_EnableIRQ>
}
 8000e66:	bf00      	nop
 8000e68:	3708      	adds	r7, #8
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}

08000e6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e6e:	b580      	push	{r7, lr}
 8000e70:	b082      	sub	sp, #8
 8000e72:	af00      	add	r7, sp, #0
 8000e74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e76:	6878      	ldr	r0, [r7, #4]
 8000e78:	f7ff ffa2 	bl	8000dc0 <SysTick_Config>
 8000e7c:	4603      	mov	r3, r0
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	3708      	adds	r7, #8
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}

08000e86 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000e86:	b580      	push	{r7, lr}
 8000e88:	b084      	sub	sp, #16
 8000e8a:	af00      	add	r7, sp, #0
 8000e8c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e92:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000e94:	f7ff feb6 	bl	8000c04 <HAL_GetTick>
 8000e98:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000ea0:	b2db      	uxtb	r3, r3
 8000ea2:	2b02      	cmp	r3, #2
 8000ea4:	d008      	beq.n	8000eb8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	2280      	movs	r2, #128	@ 0x80
 8000eaa:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	2200      	movs	r2, #0
 8000eb0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8000eb4:	2301      	movs	r3, #1
 8000eb6:	e052      	b.n	8000f5e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	681a      	ldr	r2, [r3, #0]
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	f022 0216 	bic.w	r2, r2, #22
 8000ec6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	695a      	ldr	r2, [r3, #20]
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000ed6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d103      	bne.n	8000ee8 <HAL_DMA_Abort+0x62>
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d007      	beq.n	8000ef8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	681a      	ldr	r2, [r3, #0]
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	f022 0208 	bic.w	r2, r2, #8
 8000ef6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	681a      	ldr	r2, [r3, #0]
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	f022 0201 	bic.w	r2, r2, #1
 8000f06:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f08:	e013      	b.n	8000f32 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000f0a:	f7ff fe7b 	bl	8000c04 <HAL_GetTick>
 8000f0e:	4602      	mov	r2, r0
 8000f10:	68bb      	ldr	r3, [r7, #8]
 8000f12:	1ad3      	subs	r3, r2, r3
 8000f14:	2b05      	cmp	r3, #5
 8000f16:	d90c      	bls.n	8000f32 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	2220      	movs	r2, #32
 8000f1c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	2203      	movs	r2, #3
 8000f22:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	2200      	movs	r2, #0
 8000f2a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8000f2e:	2303      	movs	r3, #3
 8000f30:	e015      	b.n	8000f5e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	f003 0301 	and.w	r3, r3, #1
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d1e4      	bne.n	8000f0a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000f44:	223f      	movs	r2, #63	@ 0x3f
 8000f46:	409a      	lsls	r2, r3
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	2201      	movs	r2, #1
 8000f50:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	2200      	movs	r2, #0
 8000f58:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8000f5c:	2300      	movs	r3, #0
}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	3710      	adds	r7, #16
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}

08000f66 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000f66:	b480      	push	{r7}
 8000f68:	b083      	sub	sp, #12
 8000f6a:	af00      	add	r7, sp, #0
 8000f6c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000f74:	b2db      	uxtb	r3, r3
 8000f76:	2b02      	cmp	r3, #2
 8000f78:	d004      	beq.n	8000f84 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	2280      	movs	r2, #128	@ 0x80
 8000f7e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8000f80:	2301      	movs	r3, #1
 8000f82:	e00c      	b.n	8000f9e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	2205      	movs	r2, #5
 8000f88:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	681a      	ldr	r2, [r3, #0]
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	f022 0201 	bic.w	r2, r2, #1
 8000f9a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000f9c:	2300      	movs	r3, #0
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	370c      	adds	r7, #12
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr
	...

08000fac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b089      	sub	sp, #36	@ 0x24
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
 8000fb4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	61fb      	str	r3, [r7, #28]
 8000fc6:	e177      	b.n	80012b8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000fc8:	2201      	movs	r2, #1
 8000fca:	69fb      	ldr	r3, [r7, #28]
 8000fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	697a      	ldr	r2, [r7, #20]
 8000fd8:	4013      	ands	r3, r2
 8000fda:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000fdc:	693a      	ldr	r2, [r7, #16]
 8000fde:	697b      	ldr	r3, [r7, #20]
 8000fe0:	429a      	cmp	r2, r3
 8000fe2:	f040 8166 	bne.w	80012b2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	685b      	ldr	r3, [r3, #4]
 8000fea:	f003 0303 	and.w	r3, r3, #3
 8000fee:	2b01      	cmp	r3, #1
 8000ff0:	d005      	beq.n	8000ffe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ffa:	2b02      	cmp	r3, #2
 8000ffc:	d130      	bne.n	8001060 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	689b      	ldr	r3, [r3, #8]
 8001002:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001004:	69fb      	ldr	r3, [r7, #28]
 8001006:	005b      	lsls	r3, r3, #1
 8001008:	2203      	movs	r2, #3
 800100a:	fa02 f303 	lsl.w	r3, r2, r3
 800100e:	43db      	mvns	r3, r3
 8001010:	69ba      	ldr	r2, [r7, #24]
 8001012:	4013      	ands	r3, r2
 8001014:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	68da      	ldr	r2, [r3, #12]
 800101a:	69fb      	ldr	r3, [r7, #28]
 800101c:	005b      	lsls	r3, r3, #1
 800101e:	fa02 f303 	lsl.w	r3, r2, r3
 8001022:	69ba      	ldr	r2, [r7, #24]
 8001024:	4313      	orrs	r3, r2
 8001026:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	69ba      	ldr	r2, [r7, #24]
 800102c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	685b      	ldr	r3, [r3, #4]
 8001032:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001034:	2201      	movs	r2, #1
 8001036:	69fb      	ldr	r3, [r7, #28]
 8001038:	fa02 f303 	lsl.w	r3, r2, r3
 800103c:	43db      	mvns	r3, r3
 800103e:	69ba      	ldr	r2, [r7, #24]
 8001040:	4013      	ands	r3, r2
 8001042:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	091b      	lsrs	r3, r3, #4
 800104a:	f003 0201 	and.w	r2, r3, #1
 800104e:	69fb      	ldr	r3, [r7, #28]
 8001050:	fa02 f303 	lsl.w	r3, r2, r3
 8001054:	69ba      	ldr	r2, [r7, #24]
 8001056:	4313      	orrs	r3, r2
 8001058:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	69ba      	ldr	r2, [r7, #24]
 800105e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	f003 0303 	and.w	r3, r3, #3
 8001068:	2b03      	cmp	r3, #3
 800106a:	d017      	beq.n	800109c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	68db      	ldr	r3, [r3, #12]
 8001070:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001072:	69fb      	ldr	r3, [r7, #28]
 8001074:	005b      	lsls	r3, r3, #1
 8001076:	2203      	movs	r2, #3
 8001078:	fa02 f303 	lsl.w	r3, r2, r3
 800107c:	43db      	mvns	r3, r3
 800107e:	69ba      	ldr	r2, [r7, #24]
 8001080:	4013      	ands	r3, r2
 8001082:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	689a      	ldr	r2, [r3, #8]
 8001088:	69fb      	ldr	r3, [r7, #28]
 800108a:	005b      	lsls	r3, r3, #1
 800108c:	fa02 f303 	lsl.w	r3, r2, r3
 8001090:	69ba      	ldr	r2, [r7, #24]
 8001092:	4313      	orrs	r3, r2
 8001094:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	69ba      	ldr	r2, [r7, #24]
 800109a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	f003 0303 	and.w	r3, r3, #3
 80010a4:	2b02      	cmp	r3, #2
 80010a6:	d123      	bne.n	80010f0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010a8:	69fb      	ldr	r3, [r7, #28]
 80010aa:	08da      	lsrs	r2, r3, #3
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	3208      	adds	r2, #8
 80010b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80010b6:	69fb      	ldr	r3, [r7, #28]
 80010b8:	f003 0307 	and.w	r3, r3, #7
 80010bc:	009b      	lsls	r3, r3, #2
 80010be:	220f      	movs	r2, #15
 80010c0:	fa02 f303 	lsl.w	r3, r2, r3
 80010c4:	43db      	mvns	r3, r3
 80010c6:	69ba      	ldr	r2, [r7, #24]
 80010c8:	4013      	ands	r3, r2
 80010ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	691a      	ldr	r2, [r3, #16]
 80010d0:	69fb      	ldr	r3, [r7, #28]
 80010d2:	f003 0307 	and.w	r3, r3, #7
 80010d6:	009b      	lsls	r3, r3, #2
 80010d8:	fa02 f303 	lsl.w	r3, r2, r3
 80010dc:	69ba      	ldr	r2, [r7, #24]
 80010de:	4313      	orrs	r3, r2
 80010e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80010e2:	69fb      	ldr	r3, [r7, #28]
 80010e4:	08da      	lsrs	r2, r3, #3
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	3208      	adds	r2, #8
 80010ea:	69b9      	ldr	r1, [r7, #24]
 80010ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010f6:	69fb      	ldr	r3, [r7, #28]
 80010f8:	005b      	lsls	r3, r3, #1
 80010fa:	2203      	movs	r2, #3
 80010fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001100:	43db      	mvns	r3, r3
 8001102:	69ba      	ldr	r2, [r7, #24]
 8001104:	4013      	ands	r3, r2
 8001106:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	f003 0203 	and.w	r2, r3, #3
 8001110:	69fb      	ldr	r3, [r7, #28]
 8001112:	005b      	lsls	r3, r3, #1
 8001114:	fa02 f303 	lsl.w	r3, r2, r3
 8001118:	69ba      	ldr	r2, [r7, #24]
 800111a:	4313      	orrs	r3, r2
 800111c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	69ba      	ldr	r2, [r7, #24]
 8001122:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800112c:	2b00      	cmp	r3, #0
 800112e:	f000 80c0 	beq.w	80012b2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001132:	2300      	movs	r3, #0
 8001134:	60fb      	str	r3, [r7, #12]
 8001136:	4b66      	ldr	r3, [pc, #408]	@ (80012d0 <HAL_GPIO_Init+0x324>)
 8001138:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800113a:	4a65      	ldr	r2, [pc, #404]	@ (80012d0 <HAL_GPIO_Init+0x324>)
 800113c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001140:	6453      	str	r3, [r2, #68]	@ 0x44
 8001142:	4b63      	ldr	r3, [pc, #396]	@ (80012d0 <HAL_GPIO_Init+0x324>)
 8001144:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001146:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800114a:	60fb      	str	r3, [r7, #12]
 800114c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800114e:	4a61      	ldr	r2, [pc, #388]	@ (80012d4 <HAL_GPIO_Init+0x328>)
 8001150:	69fb      	ldr	r3, [r7, #28]
 8001152:	089b      	lsrs	r3, r3, #2
 8001154:	3302      	adds	r3, #2
 8001156:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800115a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800115c:	69fb      	ldr	r3, [r7, #28]
 800115e:	f003 0303 	and.w	r3, r3, #3
 8001162:	009b      	lsls	r3, r3, #2
 8001164:	220f      	movs	r2, #15
 8001166:	fa02 f303 	lsl.w	r3, r2, r3
 800116a:	43db      	mvns	r3, r3
 800116c:	69ba      	ldr	r2, [r7, #24]
 800116e:	4013      	ands	r3, r2
 8001170:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	4a58      	ldr	r2, [pc, #352]	@ (80012d8 <HAL_GPIO_Init+0x32c>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d037      	beq.n	80011ea <HAL_GPIO_Init+0x23e>
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	4a57      	ldr	r2, [pc, #348]	@ (80012dc <HAL_GPIO_Init+0x330>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d031      	beq.n	80011e6 <HAL_GPIO_Init+0x23a>
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	4a56      	ldr	r2, [pc, #344]	@ (80012e0 <HAL_GPIO_Init+0x334>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d02b      	beq.n	80011e2 <HAL_GPIO_Init+0x236>
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	4a55      	ldr	r2, [pc, #340]	@ (80012e4 <HAL_GPIO_Init+0x338>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d025      	beq.n	80011de <HAL_GPIO_Init+0x232>
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	4a54      	ldr	r2, [pc, #336]	@ (80012e8 <HAL_GPIO_Init+0x33c>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d01f      	beq.n	80011da <HAL_GPIO_Init+0x22e>
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	4a53      	ldr	r2, [pc, #332]	@ (80012ec <HAL_GPIO_Init+0x340>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d019      	beq.n	80011d6 <HAL_GPIO_Init+0x22a>
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	4a52      	ldr	r2, [pc, #328]	@ (80012f0 <HAL_GPIO_Init+0x344>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d013      	beq.n	80011d2 <HAL_GPIO_Init+0x226>
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	4a51      	ldr	r2, [pc, #324]	@ (80012f4 <HAL_GPIO_Init+0x348>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d00d      	beq.n	80011ce <HAL_GPIO_Init+0x222>
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	4a50      	ldr	r2, [pc, #320]	@ (80012f8 <HAL_GPIO_Init+0x34c>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d007      	beq.n	80011ca <HAL_GPIO_Init+0x21e>
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	4a4f      	ldr	r2, [pc, #316]	@ (80012fc <HAL_GPIO_Init+0x350>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d101      	bne.n	80011c6 <HAL_GPIO_Init+0x21a>
 80011c2:	2309      	movs	r3, #9
 80011c4:	e012      	b.n	80011ec <HAL_GPIO_Init+0x240>
 80011c6:	230a      	movs	r3, #10
 80011c8:	e010      	b.n	80011ec <HAL_GPIO_Init+0x240>
 80011ca:	2308      	movs	r3, #8
 80011cc:	e00e      	b.n	80011ec <HAL_GPIO_Init+0x240>
 80011ce:	2307      	movs	r3, #7
 80011d0:	e00c      	b.n	80011ec <HAL_GPIO_Init+0x240>
 80011d2:	2306      	movs	r3, #6
 80011d4:	e00a      	b.n	80011ec <HAL_GPIO_Init+0x240>
 80011d6:	2305      	movs	r3, #5
 80011d8:	e008      	b.n	80011ec <HAL_GPIO_Init+0x240>
 80011da:	2304      	movs	r3, #4
 80011dc:	e006      	b.n	80011ec <HAL_GPIO_Init+0x240>
 80011de:	2303      	movs	r3, #3
 80011e0:	e004      	b.n	80011ec <HAL_GPIO_Init+0x240>
 80011e2:	2302      	movs	r3, #2
 80011e4:	e002      	b.n	80011ec <HAL_GPIO_Init+0x240>
 80011e6:	2301      	movs	r3, #1
 80011e8:	e000      	b.n	80011ec <HAL_GPIO_Init+0x240>
 80011ea:	2300      	movs	r3, #0
 80011ec:	69fa      	ldr	r2, [r7, #28]
 80011ee:	f002 0203 	and.w	r2, r2, #3
 80011f2:	0092      	lsls	r2, r2, #2
 80011f4:	4093      	lsls	r3, r2
 80011f6:	69ba      	ldr	r2, [r7, #24]
 80011f8:	4313      	orrs	r3, r2
 80011fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011fc:	4935      	ldr	r1, [pc, #212]	@ (80012d4 <HAL_GPIO_Init+0x328>)
 80011fe:	69fb      	ldr	r3, [r7, #28]
 8001200:	089b      	lsrs	r3, r3, #2
 8001202:	3302      	adds	r3, #2
 8001204:	69ba      	ldr	r2, [r7, #24]
 8001206:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800120a:	4b3d      	ldr	r3, [pc, #244]	@ (8001300 <HAL_GPIO_Init+0x354>)
 800120c:	689b      	ldr	r3, [r3, #8]
 800120e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001210:	693b      	ldr	r3, [r7, #16]
 8001212:	43db      	mvns	r3, r3
 8001214:	69ba      	ldr	r2, [r7, #24]
 8001216:	4013      	ands	r3, r2
 8001218:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001222:	2b00      	cmp	r3, #0
 8001224:	d003      	beq.n	800122e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001226:	69ba      	ldr	r2, [r7, #24]
 8001228:	693b      	ldr	r3, [r7, #16]
 800122a:	4313      	orrs	r3, r2
 800122c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800122e:	4a34      	ldr	r2, [pc, #208]	@ (8001300 <HAL_GPIO_Init+0x354>)
 8001230:	69bb      	ldr	r3, [r7, #24]
 8001232:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001234:	4b32      	ldr	r3, [pc, #200]	@ (8001300 <HAL_GPIO_Init+0x354>)
 8001236:	68db      	ldr	r3, [r3, #12]
 8001238:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800123a:	693b      	ldr	r3, [r7, #16]
 800123c:	43db      	mvns	r3, r3
 800123e:	69ba      	ldr	r2, [r7, #24]
 8001240:	4013      	ands	r3, r2
 8001242:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800124c:	2b00      	cmp	r3, #0
 800124e:	d003      	beq.n	8001258 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001250:	69ba      	ldr	r2, [r7, #24]
 8001252:	693b      	ldr	r3, [r7, #16]
 8001254:	4313      	orrs	r3, r2
 8001256:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001258:	4a29      	ldr	r2, [pc, #164]	@ (8001300 <HAL_GPIO_Init+0x354>)
 800125a:	69bb      	ldr	r3, [r7, #24]
 800125c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800125e:	4b28      	ldr	r3, [pc, #160]	@ (8001300 <HAL_GPIO_Init+0x354>)
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001264:	693b      	ldr	r3, [r7, #16]
 8001266:	43db      	mvns	r3, r3
 8001268:	69ba      	ldr	r2, [r7, #24]
 800126a:	4013      	ands	r3, r2
 800126c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001276:	2b00      	cmp	r3, #0
 8001278:	d003      	beq.n	8001282 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800127a:	69ba      	ldr	r2, [r7, #24]
 800127c:	693b      	ldr	r3, [r7, #16]
 800127e:	4313      	orrs	r3, r2
 8001280:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001282:	4a1f      	ldr	r2, [pc, #124]	@ (8001300 <HAL_GPIO_Init+0x354>)
 8001284:	69bb      	ldr	r3, [r7, #24]
 8001286:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001288:	4b1d      	ldr	r3, [pc, #116]	@ (8001300 <HAL_GPIO_Init+0x354>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800128e:	693b      	ldr	r3, [r7, #16]
 8001290:	43db      	mvns	r3, r3
 8001292:	69ba      	ldr	r2, [r7, #24]
 8001294:	4013      	ands	r3, r2
 8001296:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d003      	beq.n	80012ac <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80012a4:	69ba      	ldr	r2, [r7, #24]
 80012a6:	693b      	ldr	r3, [r7, #16]
 80012a8:	4313      	orrs	r3, r2
 80012aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012ac:	4a14      	ldr	r2, [pc, #80]	@ (8001300 <HAL_GPIO_Init+0x354>)
 80012ae:	69bb      	ldr	r3, [r7, #24]
 80012b0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012b2:	69fb      	ldr	r3, [r7, #28]
 80012b4:	3301      	adds	r3, #1
 80012b6:	61fb      	str	r3, [r7, #28]
 80012b8:	69fb      	ldr	r3, [r7, #28]
 80012ba:	2b0f      	cmp	r3, #15
 80012bc:	f67f ae84 	bls.w	8000fc8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80012c0:	bf00      	nop
 80012c2:	bf00      	nop
 80012c4:	3724      	adds	r7, #36	@ 0x24
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr
 80012ce:	bf00      	nop
 80012d0:	40023800 	.word	0x40023800
 80012d4:	40013800 	.word	0x40013800
 80012d8:	40020000 	.word	0x40020000
 80012dc:	40020400 	.word	0x40020400
 80012e0:	40020800 	.word	0x40020800
 80012e4:	40020c00 	.word	0x40020c00
 80012e8:	40021000 	.word	0x40021000
 80012ec:	40021400 	.word	0x40021400
 80012f0:	40021800 	.word	0x40021800
 80012f4:	40021c00 	.word	0x40021c00
 80012f8:	40022000 	.word	0x40022000
 80012fc:	40022400 	.word	0x40022400
 8001300:	40013c00 	.word	0x40013c00

08001304 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001304:	b480      	push	{r7}
 8001306:	b085      	sub	sp, #20
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
 800130c:	460b      	mov	r3, r1
 800130e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	691a      	ldr	r2, [r3, #16]
 8001314:	887b      	ldrh	r3, [r7, #2]
 8001316:	4013      	ands	r3, r2
 8001318:	2b00      	cmp	r3, #0
 800131a:	d002      	beq.n	8001322 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800131c:	2301      	movs	r3, #1
 800131e:	73fb      	strb	r3, [r7, #15]
 8001320:	e001      	b.n	8001326 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001322:	2300      	movs	r3, #0
 8001324:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001326:	7bfb      	ldrb	r3, [r7, #15]
}
 8001328:	4618      	mov	r0, r3
 800132a:	3714      	adds	r7, #20
 800132c:	46bd      	mov	sp, r7
 800132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001332:	4770      	bx	lr

08001334 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001334:	b480      	push	{r7}
 8001336:	b083      	sub	sp, #12
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
 800133c:	460b      	mov	r3, r1
 800133e:	807b      	strh	r3, [r7, #2]
 8001340:	4613      	mov	r3, r2
 8001342:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001344:	787b      	ldrb	r3, [r7, #1]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d003      	beq.n	8001352 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800134a:	887a      	ldrh	r2, [r7, #2]
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001350:	e003      	b.n	800135a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001352:	887b      	ldrh	r3, [r7, #2]
 8001354:	041a      	lsls	r2, r3, #16
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	619a      	str	r2, [r3, #24]
}
 800135a:	bf00      	nop
 800135c:	370c      	adds	r7, #12
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr
	...

08001368 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b082      	sub	sp, #8
 800136c:	af00      	add	r7, sp, #0
 800136e:	4603      	mov	r3, r0
 8001370:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001372:	4b08      	ldr	r3, [pc, #32]	@ (8001394 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001374:	695a      	ldr	r2, [r3, #20]
 8001376:	88fb      	ldrh	r3, [r7, #6]
 8001378:	4013      	ands	r3, r2
 800137a:	2b00      	cmp	r3, #0
 800137c:	d006      	beq.n	800138c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800137e:	4a05      	ldr	r2, [pc, #20]	@ (8001394 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001380:	88fb      	ldrh	r3, [r7, #6]
 8001382:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001384:	88fb      	ldrh	r3, [r7, #6]
 8001386:	4618      	mov	r0, r3
 8001388:	f000 f806 	bl	8001398 <HAL_GPIO_EXTI_Callback>
  }
}
 800138c:	bf00      	nop
 800138e:	3708      	adds	r7, #8
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	40013c00 	.word	0x40013c00

08001398 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001398:	b480      	push	{r7}
 800139a:	b083      	sub	sp, #12
 800139c:	af00      	add	r7, sp, #0
 800139e:	4603      	mov	r3, r0
 80013a0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80013a2:	bf00      	nop
 80013a4:	370c      	adds	r7, #12
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr
	...

080013b0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80013b6:	2300      	movs	r3, #0
 80013b8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80013ba:	2300      	movs	r3, #0
 80013bc:	603b      	str	r3, [r7, #0]
 80013be:	4b20      	ldr	r3, [pc, #128]	@ (8001440 <HAL_PWREx_EnableOverDrive+0x90>)
 80013c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013c2:	4a1f      	ldr	r2, [pc, #124]	@ (8001440 <HAL_PWREx_EnableOverDrive+0x90>)
 80013c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80013ca:	4b1d      	ldr	r3, [pc, #116]	@ (8001440 <HAL_PWREx_EnableOverDrive+0x90>)
 80013cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013d2:	603b      	str	r3, [r7, #0]
 80013d4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80013d6:	4b1b      	ldr	r3, [pc, #108]	@ (8001444 <HAL_PWREx_EnableOverDrive+0x94>)
 80013d8:	2201      	movs	r2, #1
 80013da:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80013dc:	f7ff fc12 	bl	8000c04 <HAL_GetTick>
 80013e0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80013e2:	e009      	b.n	80013f8 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80013e4:	f7ff fc0e 	bl	8000c04 <HAL_GetTick>
 80013e8:	4602      	mov	r2, r0
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	1ad3      	subs	r3, r2, r3
 80013ee:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80013f2:	d901      	bls.n	80013f8 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80013f4:	2303      	movs	r3, #3
 80013f6:	e01f      	b.n	8001438 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80013f8:	4b13      	ldr	r3, [pc, #76]	@ (8001448 <HAL_PWREx_EnableOverDrive+0x98>)
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001400:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001404:	d1ee      	bne.n	80013e4 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001406:	4b11      	ldr	r3, [pc, #68]	@ (800144c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001408:	2201      	movs	r2, #1
 800140a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800140c:	f7ff fbfa 	bl	8000c04 <HAL_GetTick>
 8001410:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001412:	e009      	b.n	8001428 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001414:	f7ff fbf6 	bl	8000c04 <HAL_GetTick>
 8001418:	4602      	mov	r2, r0
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	1ad3      	subs	r3, r2, r3
 800141e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001422:	d901      	bls.n	8001428 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001424:	2303      	movs	r3, #3
 8001426:	e007      	b.n	8001438 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001428:	4b07      	ldr	r3, [pc, #28]	@ (8001448 <HAL_PWREx_EnableOverDrive+0x98>)
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001430:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001434:	d1ee      	bne.n	8001414 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8001436:	2300      	movs	r3, #0
}
 8001438:	4618      	mov	r0, r3
 800143a:	3708      	adds	r7, #8
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}
 8001440:	40023800 	.word	0x40023800
 8001444:	420e0040 	.word	0x420e0040
 8001448:	40007000 	.word	0x40007000
 800144c:	420e0044 	.word	0x420e0044

08001450 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b086      	sub	sp, #24
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d101      	bne.n	8001462 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800145e:	2301      	movs	r3, #1
 8001460:	e267      	b.n	8001932 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f003 0301 	and.w	r3, r3, #1
 800146a:	2b00      	cmp	r3, #0
 800146c:	d075      	beq.n	800155a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800146e:	4b88      	ldr	r3, [pc, #544]	@ (8001690 <HAL_RCC_OscConfig+0x240>)
 8001470:	689b      	ldr	r3, [r3, #8]
 8001472:	f003 030c 	and.w	r3, r3, #12
 8001476:	2b04      	cmp	r3, #4
 8001478:	d00c      	beq.n	8001494 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800147a:	4b85      	ldr	r3, [pc, #532]	@ (8001690 <HAL_RCC_OscConfig+0x240>)
 800147c:	689b      	ldr	r3, [r3, #8]
 800147e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001482:	2b08      	cmp	r3, #8
 8001484:	d112      	bne.n	80014ac <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001486:	4b82      	ldr	r3, [pc, #520]	@ (8001690 <HAL_RCC_OscConfig+0x240>)
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800148e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001492:	d10b      	bne.n	80014ac <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001494:	4b7e      	ldr	r3, [pc, #504]	@ (8001690 <HAL_RCC_OscConfig+0x240>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800149c:	2b00      	cmp	r3, #0
 800149e:	d05b      	beq.n	8001558 <HAL_RCC_OscConfig+0x108>
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d157      	bne.n	8001558 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80014a8:	2301      	movs	r3, #1
 80014aa:	e242      	b.n	8001932 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80014b4:	d106      	bne.n	80014c4 <HAL_RCC_OscConfig+0x74>
 80014b6:	4b76      	ldr	r3, [pc, #472]	@ (8001690 <HAL_RCC_OscConfig+0x240>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4a75      	ldr	r2, [pc, #468]	@ (8001690 <HAL_RCC_OscConfig+0x240>)
 80014bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014c0:	6013      	str	r3, [r2, #0]
 80014c2:	e01d      	b.n	8001500 <HAL_RCC_OscConfig+0xb0>
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80014cc:	d10c      	bne.n	80014e8 <HAL_RCC_OscConfig+0x98>
 80014ce:	4b70      	ldr	r3, [pc, #448]	@ (8001690 <HAL_RCC_OscConfig+0x240>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4a6f      	ldr	r2, [pc, #444]	@ (8001690 <HAL_RCC_OscConfig+0x240>)
 80014d4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80014d8:	6013      	str	r3, [r2, #0]
 80014da:	4b6d      	ldr	r3, [pc, #436]	@ (8001690 <HAL_RCC_OscConfig+0x240>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4a6c      	ldr	r2, [pc, #432]	@ (8001690 <HAL_RCC_OscConfig+0x240>)
 80014e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014e4:	6013      	str	r3, [r2, #0]
 80014e6:	e00b      	b.n	8001500 <HAL_RCC_OscConfig+0xb0>
 80014e8:	4b69      	ldr	r3, [pc, #420]	@ (8001690 <HAL_RCC_OscConfig+0x240>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4a68      	ldr	r2, [pc, #416]	@ (8001690 <HAL_RCC_OscConfig+0x240>)
 80014ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80014f2:	6013      	str	r3, [r2, #0]
 80014f4:	4b66      	ldr	r3, [pc, #408]	@ (8001690 <HAL_RCC_OscConfig+0x240>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4a65      	ldr	r2, [pc, #404]	@ (8001690 <HAL_RCC_OscConfig+0x240>)
 80014fa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80014fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d013      	beq.n	8001530 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001508:	f7ff fb7c 	bl	8000c04 <HAL_GetTick>
 800150c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800150e:	e008      	b.n	8001522 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001510:	f7ff fb78 	bl	8000c04 <HAL_GetTick>
 8001514:	4602      	mov	r2, r0
 8001516:	693b      	ldr	r3, [r7, #16]
 8001518:	1ad3      	subs	r3, r2, r3
 800151a:	2b64      	cmp	r3, #100	@ 0x64
 800151c:	d901      	bls.n	8001522 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800151e:	2303      	movs	r3, #3
 8001520:	e207      	b.n	8001932 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001522:	4b5b      	ldr	r3, [pc, #364]	@ (8001690 <HAL_RCC_OscConfig+0x240>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800152a:	2b00      	cmp	r3, #0
 800152c:	d0f0      	beq.n	8001510 <HAL_RCC_OscConfig+0xc0>
 800152e:	e014      	b.n	800155a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001530:	f7ff fb68 	bl	8000c04 <HAL_GetTick>
 8001534:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001536:	e008      	b.n	800154a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001538:	f7ff fb64 	bl	8000c04 <HAL_GetTick>
 800153c:	4602      	mov	r2, r0
 800153e:	693b      	ldr	r3, [r7, #16]
 8001540:	1ad3      	subs	r3, r2, r3
 8001542:	2b64      	cmp	r3, #100	@ 0x64
 8001544:	d901      	bls.n	800154a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001546:	2303      	movs	r3, #3
 8001548:	e1f3      	b.n	8001932 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800154a:	4b51      	ldr	r3, [pc, #324]	@ (8001690 <HAL_RCC_OscConfig+0x240>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001552:	2b00      	cmp	r3, #0
 8001554:	d1f0      	bne.n	8001538 <HAL_RCC_OscConfig+0xe8>
 8001556:	e000      	b.n	800155a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001558:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f003 0302 	and.w	r3, r3, #2
 8001562:	2b00      	cmp	r3, #0
 8001564:	d063      	beq.n	800162e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001566:	4b4a      	ldr	r3, [pc, #296]	@ (8001690 <HAL_RCC_OscConfig+0x240>)
 8001568:	689b      	ldr	r3, [r3, #8]
 800156a:	f003 030c 	and.w	r3, r3, #12
 800156e:	2b00      	cmp	r3, #0
 8001570:	d00b      	beq.n	800158a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001572:	4b47      	ldr	r3, [pc, #284]	@ (8001690 <HAL_RCC_OscConfig+0x240>)
 8001574:	689b      	ldr	r3, [r3, #8]
 8001576:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800157a:	2b08      	cmp	r3, #8
 800157c:	d11c      	bne.n	80015b8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800157e:	4b44      	ldr	r3, [pc, #272]	@ (8001690 <HAL_RCC_OscConfig+0x240>)
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001586:	2b00      	cmp	r3, #0
 8001588:	d116      	bne.n	80015b8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800158a:	4b41      	ldr	r3, [pc, #260]	@ (8001690 <HAL_RCC_OscConfig+0x240>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f003 0302 	and.w	r3, r3, #2
 8001592:	2b00      	cmp	r3, #0
 8001594:	d005      	beq.n	80015a2 <HAL_RCC_OscConfig+0x152>
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	68db      	ldr	r3, [r3, #12]
 800159a:	2b01      	cmp	r3, #1
 800159c:	d001      	beq.n	80015a2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800159e:	2301      	movs	r3, #1
 80015a0:	e1c7      	b.n	8001932 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015a2:	4b3b      	ldr	r3, [pc, #236]	@ (8001690 <HAL_RCC_OscConfig+0x240>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	691b      	ldr	r3, [r3, #16]
 80015ae:	00db      	lsls	r3, r3, #3
 80015b0:	4937      	ldr	r1, [pc, #220]	@ (8001690 <HAL_RCC_OscConfig+0x240>)
 80015b2:	4313      	orrs	r3, r2
 80015b4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015b6:	e03a      	b.n	800162e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	68db      	ldr	r3, [r3, #12]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d020      	beq.n	8001602 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015c0:	4b34      	ldr	r3, [pc, #208]	@ (8001694 <HAL_RCC_OscConfig+0x244>)
 80015c2:	2201      	movs	r2, #1
 80015c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015c6:	f7ff fb1d 	bl	8000c04 <HAL_GetTick>
 80015ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015cc:	e008      	b.n	80015e0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015ce:	f7ff fb19 	bl	8000c04 <HAL_GetTick>
 80015d2:	4602      	mov	r2, r0
 80015d4:	693b      	ldr	r3, [r7, #16]
 80015d6:	1ad3      	subs	r3, r2, r3
 80015d8:	2b02      	cmp	r3, #2
 80015da:	d901      	bls.n	80015e0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80015dc:	2303      	movs	r3, #3
 80015de:	e1a8      	b.n	8001932 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015e0:	4b2b      	ldr	r3, [pc, #172]	@ (8001690 <HAL_RCC_OscConfig+0x240>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f003 0302 	and.w	r3, r3, #2
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d0f0      	beq.n	80015ce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015ec:	4b28      	ldr	r3, [pc, #160]	@ (8001690 <HAL_RCC_OscConfig+0x240>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	691b      	ldr	r3, [r3, #16]
 80015f8:	00db      	lsls	r3, r3, #3
 80015fa:	4925      	ldr	r1, [pc, #148]	@ (8001690 <HAL_RCC_OscConfig+0x240>)
 80015fc:	4313      	orrs	r3, r2
 80015fe:	600b      	str	r3, [r1, #0]
 8001600:	e015      	b.n	800162e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001602:	4b24      	ldr	r3, [pc, #144]	@ (8001694 <HAL_RCC_OscConfig+0x244>)
 8001604:	2200      	movs	r2, #0
 8001606:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001608:	f7ff fafc 	bl	8000c04 <HAL_GetTick>
 800160c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800160e:	e008      	b.n	8001622 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001610:	f7ff faf8 	bl	8000c04 <HAL_GetTick>
 8001614:	4602      	mov	r2, r0
 8001616:	693b      	ldr	r3, [r7, #16]
 8001618:	1ad3      	subs	r3, r2, r3
 800161a:	2b02      	cmp	r3, #2
 800161c:	d901      	bls.n	8001622 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800161e:	2303      	movs	r3, #3
 8001620:	e187      	b.n	8001932 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001622:	4b1b      	ldr	r3, [pc, #108]	@ (8001690 <HAL_RCC_OscConfig+0x240>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f003 0302 	and.w	r3, r3, #2
 800162a:	2b00      	cmp	r3, #0
 800162c:	d1f0      	bne.n	8001610 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f003 0308 	and.w	r3, r3, #8
 8001636:	2b00      	cmp	r3, #0
 8001638:	d036      	beq.n	80016a8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	695b      	ldr	r3, [r3, #20]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d016      	beq.n	8001670 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001642:	4b15      	ldr	r3, [pc, #84]	@ (8001698 <HAL_RCC_OscConfig+0x248>)
 8001644:	2201      	movs	r2, #1
 8001646:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001648:	f7ff fadc 	bl	8000c04 <HAL_GetTick>
 800164c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800164e:	e008      	b.n	8001662 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001650:	f7ff fad8 	bl	8000c04 <HAL_GetTick>
 8001654:	4602      	mov	r2, r0
 8001656:	693b      	ldr	r3, [r7, #16]
 8001658:	1ad3      	subs	r3, r2, r3
 800165a:	2b02      	cmp	r3, #2
 800165c:	d901      	bls.n	8001662 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800165e:	2303      	movs	r3, #3
 8001660:	e167      	b.n	8001932 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001662:	4b0b      	ldr	r3, [pc, #44]	@ (8001690 <HAL_RCC_OscConfig+0x240>)
 8001664:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001666:	f003 0302 	and.w	r3, r3, #2
 800166a:	2b00      	cmp	r3, #0
 800166c:	d0f0      	beq.n	8001650 <HAL_RCC_OscConfig+0x200>
 800166e:	e01b      	b.n	80016a8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001670:	4b09      	ldr	r3, [pc, #36]	@ (8001698 <HAL_RCC_OscConfig+0x248>)
 8001672:	2200      	movs	r2, #0
 8001674:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001676:	f7ff fac5 	bl	8000c04 <HAL_GetTick>
 800167a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800167c:	e00e      	b.n	800169c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800167e:	f7ff fac1 	bl	8000c04 <HAL_GetTick>
 8001682:	4602      	mov	r2, r0
 8001684:	693b      	ldr	r3, [r7, #16]
 8001686:	1ad3      	subs	r3, r2, r3
 8001688:	2b02      	cmp	r3, #2
 800168a:	d907      	bls.n	800169c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800168c:	2303      	movs	r3, #3
 800168e:	e150      	b.n	8001932 <HAL_RCC_OscConfig+0x4e2>
 8001690:	40023800 	.word	0x40023800
 8001694:	42470000 	.word	0x42470000
 8001698:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800169c:	4b88      	ldr	r3, [pc, #544]	@ (80018c0 <HAL_RCC_OscConfig+0x470>)
 800169e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80016a0:	f003 0302 	and.w	r3, r3, #2
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d1ea      	bne.n	800167e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f003 0304 	and.w	r3, r3, #4
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	f000 8097 	beq.w	80017e4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016b6:	2300      	movs	r3, #0
 80016b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016ba:	4b81      	ldr	r3, [pc, #516]	@ (80018c0 <HAL_RCC_OscConfig+0x470>)
 80016bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d10f      	bne.n	80016e6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016c6:	2300      	movs	r3, #0
 80016c8:	60bb      	str	r3, [r7, #8]
 80016ca:	4b7d      	ldr	r3, [pc, #500]	@ (80018c0 <HAL_RCC_OscConfig+0x470>)
 80016cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ce:	4a7c      	ldr	r2, [pc, #496]	@ (80018c0 <HAL_RCC_OscConfig+0x470>)
 80016d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80016d6:	4b7a      	ldr	r3, [pc, #488]	@ (80018c0 <HAL_RCC_OscConfig+0x470>)
 80016d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016de:	60bb      	str	r3, [r7, #8]
 80016e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016e2:	2301      	movs	r3, #1
 80016e4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016e6:	4b77      	ldr	r3, [pc, #476]	@ (80018c4 <HAL_RCC_OscConfig+0x474>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d118      	bne.n	8001724 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016f2:	4b74      	ldr	r3, [pc, #464]	@ (80018c4 <HAL_RCC_OscConfig+0x474>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4a73      	ldr	r2, [pc, #460]	@ (80018c4 <HAL_RCC_OscConfig+0x474>)
 80016f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016fe:	f7ff fa81 	bl	8000c04 <HAL_GetTick>
 8001702:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001704:	e008      	b.n	8001718 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001706:	f7ff fa7d 	bl	8000c04 <HAL_GetTick>
 800170a:	4602      	mov	r2, r0
 800170c:	693b      	ldr	r3, [r7, #16]
 800170e:	1ad3      	subs	r3, r2, r3
 8001710:	2b02      	cmp	r3, #2
 8001712:	d901      	bls.n	8001718 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001714:	2303      	movs	r3, #3
 8001716:	e10c      	b.n	8001932 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001718:	4b6a      	ldr	r3, [pc, #424]	@ (80018c4 <HAL_RCC_OscConfig+0x474>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001720:	2b00      	cmp	r3, #0
 8001722:	d0f0      	beq.n	8001706 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	689b      	ldr	r3, [r3, #8]
 8001728:	2b01      	cmp	r3, #1
 800172a:	d106      	bne.n	800173a <HAL_RCC_OscConfig+0x2ea>
 800172c:	4b64      	ldr	r3, [pc, #400]	@ (80018c0 <HAL_RCC_OscConfig+0x470>)
 800172e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001730:	4a63      	ldr	r2, [pc, #396]	@ (80018c0 <HAL_RCC_OscConfig+0x470>)
 8001732:	f043 0301 	orr.w	r3, r3, #1
 8001736:	6713      	str	r3, [r2, #112]	@ 0x70
 8001738:	e01c      	b.n	8001774 <HAL_RCC_OscConfig+0x324>
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	689b      	ldr	r3, [r3, #8]
 800173e:	2b05      	cmp	r3, #5
 8001740:	d10c      	bne.n	800175c <HAL_RCC_OscConfig+0x30c>
 8001742:	4b5f      	ldr	r3, [pc, #380]	@ (80018c0 <HAL_RCC_OscConfig+0x470>)
 8001744:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001746:	4a5e      	ldr	r2, [pc, #376]	@ (80018c0 <HAL_RCC_OscConfig+0x470>)
 8001748:	f043 0304 	orr.w	r3, r3, #4
 800174c:	6713      	str	r3, [r2, #112]	@ 0x70
 800174e:	4b5c      	ldr	r3, [pc, #368]	@ (80018c0 <HAL_RCC_OscConfig+0x470>)
 8001750:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001752:	4a5b      	ldr	r2, [pc, #364]	@ (80018c0 <HAL_RCC_OscConfig+0x470>)
 8001754:	f043 0301 	orr.w	r3, r3, #1
 8001758:	6713      	str	r3, [r2, #112]	@ 0x70
 800175a:	e00b      	b.n	8001774 <HAL_RCC_OscConfig+0x324>
 800175c:	4b58      	ldr	r3, [pc, #352]	@ (80018c0 <HAL_RCC_OscConfig+0x470>)
 800175e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001760:	4a57      	ldr	r2, [pc, #348]	@ (80018c0 <HAL_RCC_OscConfig+0x470>)
 8001762:	f023 0301 	bic.w	r3, r3, #1
 8001766:	6713      	str	r3, [r2, #112]	@ 0x70
 8001768:	4b55      	ldr	r3, [pc, #340]	@ (80018c0 <HAL_RCC_OscConfig+0x470>)
 800176a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800176c:	4a54      	ldr	r2, [pc, #336]	@ (80018c0 <HAL_RCC_OscConfig+0x470>)
 800176e:	f023 0304 	bic.w	r3, r3, #4
 8001772:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	689b      	ldr	r3, [r3, #8]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d015      	beq.n	80017a8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800177c:	f7ff fa42 	bl	8000c04 <HAL_GetTick>
 8001780:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001782:	e00a      	b.n	800179a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001784:	f7ff fa3e 	bl	8000c04 <HAL_GetTick>
 8001788:	4602      	mov	r2, r0
 800178a:	693b      	ldr	r3, [r7, #16]
 800178c:	1ad3      	subs	r3, r2, r3
 800178e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001792:	4293      	cmp	r3, r2
 8001794:	d901      	bls.n	800179a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001796:	2303      	movs	r3, #3
 8001798:	e0cb      	b.n	8001932 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800179a:	4b49      	ldr	r3, [pc, #292]	@ (80018c0 <HAL_RCC_OscConfig+0x470>)
 800179c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800179e:	f003 0302 	and.w	r3, r3, #2
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d0ee      	beq.n	8001784 <HAL_RCC_OscConfig+0x334>
 80017a6:	e014      	b.n	80017d2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017a8:	f7ff fa2c 	bl	8000c04 <HAL_GetTick>
 80017ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017ae:	e00a      	b.n	80017c6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017b0:	f7ff fa28 	bl	8000c04 <HAL_GetTick>
 80017b4:	4602      	mov	r2, r0
 80017b6:	693b      	ldr	r3, [r7, #16]
 80017b8:	1ad3      	subs	r3, r2, r3
 80017ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017be:	4293      	cmp	r3, r2
 80017c0:	d901      	bls.n	80017c6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80017c2:	2303      	movs	r3, #3
 80017c4:	e0b5      	b.n	8001932 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017c6:	4b3e      	ldr	r3, [pc, #248]	@ (80018c0 <HAL_RCC_OscConfig+0x470>)
 80017c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017ca:	f003 0302 	and.w	r3, r3, #2
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d1ee      	bne.n	80017b0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80017d2:	7dfb      	ldrb	r3, [r7, #23]
 80017d4:	2b01      	cmp	r3, #1
 80017d6:	d105      	bne.n	80017e4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017d8:	4b39      	ldr	r3, [pc, #228]	@ (80018c0 <HAL_RCC_OscConfig+0x470>)
 80017da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017dc:	4a38      	ldr	r2, [pc, #224]	@ (80018c0 <HAL_RCC_OscConfig+0x470>)
 80017de:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80017e2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	699b      	ldr	r3, [r3, #24]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	f000 80a1 	beq.w	8001930 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80017ee:	4b34      	ldr	r3, [pc, #208]	@ (80018c0 <HAL_RCC_OscConfig+0x470>)
 80017f0:	689b      	ldr	r3, [r3, #8]
 80017f2:	f003 030c 	and.w	r3, r3, #12
 80017f6:	2b08      	cmp	r3, #8
 80017f8:	d05c      	beq.n	80018b4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	699b      	ldr	r3, [r3, #24]
 80017fe:	2b02      	cmp	r3, #2
 8001800:	d141      	bne.n	8001886 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001802:	4b31      	ldr	r3, [pc, #196]	@ (80018c8 <HAL_RCC_OscConfig+0x478>)
 8001804:	2200      	movs	r2, #0
 8001806:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001808:	f7ff f9fc 	bl	8000c04 <HAL_GetTick>
 800180c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800180e:	e008      	b.n	8001822 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001810:	f7ff f9f8 	bl	8000c04 <HAL_GetTick>
 8001814:	4602      	mov	r2, r0
 8001816:	693b      	ldr	r3, [r7, #16]
 8001818:	1ad3      	subs	r3, r2, r3
 800181a:	2b02      	cmp	r3, #2
 800181c:	d901      	bls.n	8001822 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800181e:	2303      	movs	r3, #3
 8001820:	e087      	b.n	8001932 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001822:	4b27      	ldr	r3, [pc, #156]	@ (80018c0 <HAL_RCC_OscConfig+0x470>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800182a:	2b00      	cmp	r3, #0
 800182c:	d1f0      	bne.n	8001810 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	69da      	ldr	r2, [r3, #28]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6a1b      	ldr	r3, [r3, #32]
 8001836:	431a      	orrs	r2, r3
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800183c:	019b      	lsls	r3, r3, #6
 800183e:	431a      	orrs	r2, r3
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001844:	085b      	lsrs	r3, r3, #1
 8001846:	3b01      	subs	r3, #1
 8001848:	041b      	lsls	r3, r3, #16
 800184a:	431a      	orrs	r2, r3
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001850:	061b      	lsls	r3, r3, #24
 8001852:	491b      	ldr	r1, [pc, #108]	@ (80018c0 <HAL_RCC_OscConfig+0x470>)
 8001854:	4313      	orrs	r3, r2
 8001856:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001858:	4b1b      	ldr	r3, [pc, #108]	@ (80018c8 <HAL_RCC_OscConfig+0x478>)
 800185a:	2201      	movs	r2, #1
 800185c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800185e:	f7ff f9d1 	bl	8000c04 <HAL_GetTick>
 8001862:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001864:	e008      	b.n	8001878 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001866:	f7ff f9cd 	bl	8000c04 <HAL_GetTick>
 800186a:	4602      	mov	r2, r0
 800186c:	693b      	ldr	r3, [r7, #16]
 800186e:	1ad3      	subs	r3, r2, r3
 8001870:	2b02      	cmp	r3, #2
 8001872:	d901      	bls.n	8001878 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001874:	2303      	movs	r3, #3
 8001876:	e05c      	b.n	8001932 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001878:	4b11      	ldr	r3, [pc, #68]	@ (80018c0 <HAL_RCC_OscConfig+0x470>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001880:	2b00      	cmp	r3, #0
 8001882:	d0f0      	beq.n	8001866 <HAL_RCC_OscConfig+0x416>
 8001884:	e054      	b.n	8001930 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001886:	4b10      	ldr	r3, [pc, #64]	@ (80018c8 <HAL_RCC_OscConfig+0x478>)
 8001888:	2200      	movs	r2, #0
 800188a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800188c:	f7ff f9ba 	bl	8000c04 <HAL_GetTick>
 8001890:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001892:	e008      	b.n	80018a6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001894:	f7ff f9b6 	bl	8000c04 <HAL_GetTick>
 8001898:	4602      	mov	r2, r0
 800189a:	693b      	ldr	r3, [r7, #16]
 800189c:	1ad3      	subs	r3, r2, r3
 800189e:	2b02      	cmp	r3, #2
 80018a0:	d901      	bls.n	80018a6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80018a2:	2303      	movs	r3, #3
 80018a4:	e045      	b.n	8001932 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018a6:	4b06      	ldr	r3, [pc, #24]	@ (80018c0 <HAL_RCC_OscConfig+0x470>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d1f0      	bne.n	8001894 <HAL_RCC_OscConfig+0x444>
 80018b2:	e03d      	b.n	8001930 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	699b      	ldr	r3, [r3, #24]
 80018b8:	2b01      	cmp	r3, #1
 80018ba:	d107      	bne.n	80018cc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80018bc:	2301      	movs	r3, #1
 80018be:	e038      	b.n	8001932 <HAL_RCC_OscConfig+0x4e2>
 80018c0:	40023800 	.word	0x40023800
 80018c4:	40007000 	.word	0x40007000
 80018c8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80018cc:	4b1b      	ldr	r3, [pc, #108]	@ (800193c <HAL_RCC_OscConfig+0x4ec>)
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	699b      	ldr	r3, [r3, #24]
 80018d6:	2b01      	cmp	r3, #1
 80018d8:	d028      	beq.n	800192c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018e4:	429a      	cmp	r2, r3
 80018e6:	d121      	bne.n	800192c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018f2:	429a      	cmp	r2, r3
 80018f4:	d11a      	bne.n	800192c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80018f6:	68fa      	ldr	r2, [r7, #12]
 80018f8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80018fc:	4013      	ands	r3, r2
 80018fe:	687a      	ldr	r2, [r7, #4]
 8001900:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001902:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001904:	4293      	cmp	r3, r2
 8001906:	d111      	bne.n	800192c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001912:	085b      	lsrs	r3, r3, #1
 8001914:	3b01      	subs	r3, #1
 8001916:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001918:	429a      	cmp	r2, r3
 800191a:	d107      	bne.n	800192c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001926:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001928:	429a      	cmp	r2, r3
 800192a:	d001      	beq.n	8001930 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800192c:	2301      	movs	r3, #1
 800192e:	e000      	b.n	8001932 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001930:	2300      	movs	r3, #0
}
 8001932:	4618      	mov	r0, r3
 8001934:	3718      	adds	r7, #24
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	40023800 	.word	0x40023800

08001940 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b084      	sub	sp, #16
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
 8001948:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d101      	bne.n	8001954 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001950:	2301      	movs	r3, #1
 8001952:	e0cc      	b.n	8001aee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001954:	4b68      	ldr	r3, [pc, #416]	@ (8001af8 <HAL_RCC_ClockConfig+0x1b8>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f003 030f 	and.w	r3, r3, #15
 800195c:	683a      	ldr	r2, [r7, #0]
 800195e:	429a      	cmp	r2, r3
 8001960:	d90c      	bls.n	800197c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001962:	4b65      	ldr	r3, [pc, #404]	@ (8001af8 <HAL_RCC_ClockConfig+0x1b8>)
 8001964:	683a      	ldr	r2, [r7, #0]
 8001966:	b2d2      	uxtb	r2, r2
 8001968:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800196a:	4b63      	ldr	r3, [pc, #396]	@ (8001af8 <HAL_RCC_ClockConfig+0x1b8>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f003 030f 	and.w	r3, r3, #15
 8001972:	683a      	ldr	r2, [r7, #0]
 8001974:	429a      	cmp	r2, r3
 8001976:	d001      	beq.n	800197c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001978:	2301      	movs	r3, #1
 800197a:	e0b8      	b.n	8001aee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f003 0302 	and.w	r3, r3, #2
 8001984:	2b00      	cmp	r3, #0
 8001986:	d020      	beq.n	80019ca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f003 0304 	and.w	r3, r3, #4
 8001990:	2b00      	cmp	r3, #0
 8001992:	d005      	beq.n	80019a0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001994:	4b59      	ldr	r3, [pc, #356]	@ (8001afc <HAL_RCC_ClockConfig+0x1bc>)
 8001996:	689b      	ldr	r3, [r3, #8]
 8001998:	4a58      	ldr	r2, [pc, #352]	@ (8001afc <HAL_RCC_ClockConfig+0x1bc>)
 800199a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800199e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f003 0308 	and.w	r3, r3, #8
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d005      	beq.n	80019b8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80019ac:	4b53      	ldr	r3, [pc, #332]	@ (8001afc <HAL_RCC_ClockConfig+0x1bc>)
 80019ae:	689b      	ldr	r3, [r3, #8]
 80019b0:	4a52      	ldr	r2, [pc, #328]	@ (8001afc <HAL_RCC_ClockConfig+0x1bc>)
 80019b2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80019b6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019b8:	4b50      	ldr	r3, [pc, #320]	@ (8001afc <HAL_RCC_ClockConfig+0x1bc>)
 80019ba:	689b      	ldr	r3, [r3, #8]
 80019bc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	689b      	ldr	r3, [r3, #8]
 80019c4:	494d      	ldr	r1, [pc, #308]	@ (8001afc <HAL_RCC_ClockConfig+0x1bc>)
 80019c6:	4313      	orrs	r3, r2
 80019c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f003 0301 	and.w	r3, r3, #1
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d044      	beq.n	8001a60 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	2b01      	cmp	r3, #1
 80019dc:	d107      	bne.n	80019ee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019de:	4b47      	ldr	r3, [pc, #284]	@ (8001afc <HAL_RCC_ClockConfig+0x1bc>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d119      	bne.n	8001a1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019ea:	2301      	movs	r3, #1
 80019ec:	e07f      	b.n	8001aee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	2b02      	cmp	r3, #2
 80019f4:	d003      	beq.n	80019fe <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019fa:	2b03      	cmp	r3, #3
 80019fc:	d107      	bne.n	8001a0e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019fe:	4b3f      	ldr	r3, [pc, #252]	@ (8001afc <HAL_RCC_ClockConfig+0x1bc>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d109      	bne.n	8001a1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e06f      	b.n	8001aee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a0e:	4b3b      	ldr	r3, [pc, #236]	@ (8001afc <HAL_RCC_ClockConfig+0x1bc>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f003 0302 	and.w	r3, r3, #2
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d101      	bne.n	8001a1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	e067      	b.n	8001aee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a1e:	4b37      	ldr	r3, [pc, #220]	@ (8001afc <HAL_RCC_ClockConfig+0x1bc>)
 8001a20:	689b      	ldr	r3, [r3, #8]
 8001a22:	f023 0203 	bic.w	r2, r3, #3
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	4934      	ldr	r1, [pc, #208]	@ (8001afc <HAL_RCC_ClockConfig+0x1bc>)
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a30:	f7ff f8e8 	bl	8000c04 <HAL_GetTick>
 8001a34:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a36:	e00a      	b.n	8001a4e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a38:	f7ff f8e4 	bl	8000c04 <HAL_GetTick>
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	1ad3      	subs	r3, r2, r3
 8001a42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d901      	bls.n	8001a4e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a4a:	2303      	movs	r3, #3
 8001a4c:	e04f      	b.n	8001aee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a4e:	4b2b      	ldr	r3, [pc, #172]	@ (8001afc <HAL_RCC_ClockConfig+0x1bc>)
 8001a50:	689b      	ldr	r3, [r3, #8]
 8001a52:	f003 020c 	and.w	r2, r3, #12
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	009b      	lsls	r3, r3, #2
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	d1eb      	bne.n	8001a38 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a60:	4b25      	ldr	r3, [pc, #148]	@ (8001af8 <HAL_RCC_ClockConfig+0x1b8>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f003 030f 	and.w	r3, r3, #15
 8001a68:	683a      	ldr	r2, [r7, #0]
 8001a6a:	429a      	cmp	r2, r3
 8001a6c:	d20c      	bcs.n	8001a88 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a6e:	4b22      	ldr	r3, [pc, #136]	@ (8001af8 <HAL_RCC_ClockConfig+0x1b8>)
 8001a70:	683a      	ldr	r2, [r7, #0]
 8001a72:	b2d2      	uxtb	r2, r2
 8001a74:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a76:	4b20      	ldr	r3, [pc, #128]	@ (8001af8 <HAL_RCC_ClockConfig+0x1b8>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f003 030f 	and.w	r3, r3, #15
 8001a7e:	683a      	ldr	r2, [r7, #0]
 8001a80:	429a      	cmp	r2, r3
 8001a82:	d001      	beq.n	8001a88 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001a84:	2301      	movs	r3, #1
 8001a86:	e032      	b.n	8001aee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f003 0304 	and.w	r3, r3, #4
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d008      	beq.n	8001aa6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a94:	4b19      	ldr	r3, [pc, #100]	@ (8001afc <HAL_RCC_ClockConfig+0x1bc>)
 8001a96:	689b      	ldr	r3, [r3, #8]
 8001a98:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	68db      	ldr	r3, [r3, #12]
 8001aa0:	4916      	ldr	r1, [pc, #88]	@ (8001afc <HAL_RCC_ClockConfig+0x1bc>)
 8001aa2:	4313      	orrs	r3, r2
 8001aa4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f003 0308 	and.w	r3, r3, #8
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d009      	beq.n	8001ac6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ab2:	4b12      	ldr	r3, [pc, #72]	@ (8001afc <HAL_RCC_ClockConfig+0x1bc>)
 8001ab4:	689b      	ldr	r3, [r3, #8]
 8001ab6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	691b      	ldr	r3, [r3, #16]
 8001abe:	00db      	lsls	r3, r3, #3
 8001ac0:	490e      	ldr	r1, [pc, #56]	@ (8001afc <HAL_RCC_ClockConfig+0x1bc>)
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001ac6:	f000 f821 	bl	8001b0c <HAL_RCC_GetSysClockFreq>
 8001aca:	4602      	mov	r2, r0
 8001acc:	4b0b      	ldr	r3, [pc, #44]	@ (8001afc <HAL_RCC_ClockConfig+0x1bc>)
 8001ace:	689b      	ldr	r3, [r3, #8]
 8001ad0:	091b      	lsrs	r3, r3, #4
 8001ad2:	f003 030f 	and.w	r3, r3, #15
 8001ad6:	490a      	ldr	r1, [pc, #40]	@ (8001b00 <HAL_RCC_ClockConfig+0x1c0>)
 8001ad8:	5ccb      	ldrb	r3, [r1, r3]
 8001ada:	fa22 f303 	lsr.w	r3, r2, r3
 8001ade:	4a09      	ldr	r2, [pc, #36]	@ (8001b04 <HAL_RCC_ClockConfig+0x1c4>)
 8001ae0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001ae2:	4b09      	ldr	r3, [pc, #36]	@ (8001b08 <HAL_RCC_ClockConfig+0x1c8>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f7ff f848 	bl	8000b7c <HAL_InitTick>

  return HAL_OK;
 8001aec:	2300      	movs	r3, #0
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	3710      	adds	r7, #16
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	40023c00 	.word	0x40023c00
 8001afc:	40023800 	.word	0x40023800
 8001b00:	080033d0 	.word	0x080033d0
 8001b04:	20000070 	.word	0x20000070
 8001b08:	20000074 	.word	0x20000074

08001b0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b10:	b090      	sub	sp, #64	@ 0x40
 8001b12:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001b14:	2300      	movs	r3, #0
 8001b16:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8001b20:	2300      	movs	r3, #0
 8001b22:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b24:	4b59      	ldr	r3, [pc, #356]	@ (8001c8c <HAL_RCC_GetSysClockFreq+0x180>)
 8001b26:	689b      	ldr	r3, [r3, #8]
 8001b28:	f003 030c 	and.w	r3, r3, #12
 8001b2c:	2b08      	cmp	r3, #8
 8001b2e:	d00d      	beq.n	8001b4c <HAL_RCC_GetSysClockFreq+0x40>
 8001b30:	2b08      	cmp	r3, #8
 8001b32:	f200 80a1 	bhi.w	8001c78 <HAL_RCC_GetSysClockFreq+0x16c>
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d002      	beq.n	8001b40 <HAL_RCC_GetSysClockFreq+0x34>
 8001b3a:	2b04      	cmp	r3, #4
 8001b3c:	d003      	beq.n	8001b46 <HAL_RCC_GetSysClockFreq+0x3a>
 8001b3e:	e09b      	b.n	8001c78 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b40:	4b53      	ldr	r3, [pc, #332]	@ (8001c90 <HAL_RCC_GetSysClockFreq+0x184>)
 8001b42:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001b44:	e09b      	b.n	8001c7e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001b46:	4b53      	ldr	r3, [pc, #332]	@ (8001c94 <HAL_RCC_GetSysClockFreq+0x188>)
 8001b48:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001b4a:	e098      	b.n	8001c7e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b4c:	4b4f      	ldr	r3, [pc, #316]	@ (8001c8c <HAL_RCC_GetSysClockFreq+0x180>)
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001b54:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b56:	4b4d      	ldr	r3, [pc, #308]	@ (8001c8c <HAL_RCC_GetSysClockFreq+0x180>)
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d028      	beq.n	8001bb4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b62:	4b4a      	ldr	r3, [pc, #296]	@ (8001c8c <HAL_RCC_GetSysClockFreq+0x180>)
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	099b      	lsrs	r3, r3, #6
 8001b68:	2200      	movs	r2, #0
 8001b6a:	623b      	str	r3, [r7, #32]
 8001b6c:	627a      	str	r2, [r7, #36]	@ 0x24
 8001b6e:	6a3b      	ldr	r3, [r7, #32]
 8001b70:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001b74:	2100      	movs	r1, #0
 8001b76:	4b47      	ldr	r3, [pc, #284]	@ (8001c94 <HAL_RCC_GetSysClockFreq+0x188>)
 8001b78:	fb03 f201 	mul.w	r2, r3, r1
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	fb00 f303 	mul.w	r3, r0, r3
 8001b82:	4413      	add	r3, r2
 8001b84:	4a43      	ldr	r2, [pc, #268]	@ (8001c94 <HAL_RCC_GetSysClockFreq+0x188>)
 8001b86:	fba0 1202 	umull	r1, r2, r0, r2
 8001b8a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001b8c:	460a      	mov	r2, r1
 8001b8e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8001b90:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001b92:	4413      	add	r3, r2
 8001b94:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001b96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001b98:	2200      	movs	r2, #0
 8001b9a:	61bb      	str	r3, [r7, #24]
 8001b9c:	61fa      	str	r2, [r7, #28]
 8001b9e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001ba2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001ba6:	f7fe fb29 	bl	80001fc <__aeabi_uldivmod>
 8001baa:	4602      	mov	r2, r0
 8001bac:	460b      	mov	r3, r1
 8001bae:	4613      	mov	r3, r2
 8001bb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001bb2:	e053      	b.n	8001c5c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bb4:	4b35      	ldr	r3, [pc, #212]	@ (8001c8c <HAL_RCC_GetSysClockFreq+0x180>)
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	099b      	lsrs	r3, r3, #6
 8001bba:	2200      	movs	r2, #0
 8001bbc:	613b      	str	r3, [r7, #16]
 8001bbe:	617a      	str	r2, [r7, #20]
 8001bc0:	693b      	ldr	r3, [r7, #16]
 8001bc2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001bc6:	f04f 0b00 	mov.w	fp, #0
 8001bca:	4652      	mov	r2, sl
 8001bcc:	465b      	mov	r3, fp
 8001bce:	f04f 0000 	mov.w	r0, #0
 8001bd2:	f04f 0100 	mov.w	r1, #0
 8001bd6:	0159      	lsls	r1, r3, #5
 8001bd8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001bdc:	0150      	lsls	r0, r2, #5
 8001bde:	4602      	mov	r2, r0
 8001be0:	460b      	mov	r3, r1
 8001be2:	ebb2 080a 	subs.w	r8, r2, sl
 8001be6:	eb63 090b 	sbc.w	r9, r3, fp
 8001bea:	f04f 0200 	mov.w	r2, #0
 8001bee:	f04f 0300 	mov.w	r3, #0
 8001bf2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001bf6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001bfa:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001bfe:	ebb2 0408 	subs.w	r4, r2, r8
 8001c02:	eb63 0509 	sbc.w	r5, r3, r9
 8001c06:	f04f 0200 	mov.w	r2, #0
 8001c0a:	f04f 0300 	mov.w	r3, #0
 8001c0e:	00eb      	lsls	r3, r5, #3
 8001c10:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001c14:	00e2      	lsls	r2, r4, #3
 8001c16:	4614      	mov	r4, r2
 8001c18:	461d      	mov	r5, r3
 8001c1a:	eb14 030a 	adds.w	r3, r4, sl
 8001c1e:	603b      	str	r3, [r7, #0]
 8001c20:	eb45 030b 	adc.w	r3, r5, fp
 8001c24:	607b      	str	r3, [r7, #4]
 8001c26:	f04f 0200 	mov.w	r2, #0
 8001c2a:	f04f 0300 	mov.w	r3, #0
 8001c2e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001c32:	4629      	mov	r1, r5
 8001c34:	028b      	lsls	r3, r1, #10
 8001c36:	4621      	mov	r1, r4
 8001c38:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001c3c:	4621      	mov	r1, r4
 8001c3e:	028a      	lsls	r2, r1, #10
 8001c40:	4610      	mov	r0, r2
 8001c42:	4619      	mov	r1, r3
 8001c44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c46:	2200      	movs	r2, #0
 8001c48:	60bb      	str	r3, [r7, #8]
 8001c4a:	60fa      	str	r2, [r7, #12]
 8001c4c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001c50:	f7fe fad4 	bl	80001fc <__aeabi_uldivmod>
 8001c54:	4602      	mov	r2, r0
 8001c56:	460b      	mov	r3, r1
 8001c58:	4613      	mov	r3, r2
 8001c5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001c5c:	4b0b      	ldr	r3, [pc, #44]	@ (8001c8c <HAL_RCC_GetSysClockFreq+0x180>)
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	0c1b      	lsrs	r3, r3, #16
 8001c62:	f003 0303 	and.w	r3, r3, #3
 8001c66:	3301      	adds	r3, #1
 8001c68:	005b      	lsls	r3, r3, #1
 8001c6a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8001c6c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001c6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001c70:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c74:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001c76:	e002      	b.n	8001c7e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001c78:	4b05      	ldr	r3, [pc, #20]	@ (8001c90 <HAL_RCC_GetSysClockFreq+0x184>)
 8001c7a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001c7c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	3740      	adds	r7, #64	@ 0x40
 8001c84:	46bd      	mov	sp, r7
 8001c86:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001c8a:	bf00      	nop
 8001c8c:	40023800 	.word	0x40023800
 8001c90:	00f42400 	.word	0x00f42400
 8001c94:	017d7840 	.word	0x017d7840

08001c98 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c9c:	4b03      	ldr	r3, [pc, #12]	@ (8001cac <HAL_RCC_GetHCLKFreq+0x14>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr
 8001caa:	bf00      	nop
 8001cac:	20000070 	.word	0x20000070

08001cb0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001cb4:	f7ff fff0 	bl	8001c98 <HAL_RCC_GetHCLKFreq>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	4b05      	ldr	r3, [pc, #20]	@ (8001cd0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001cbc:	689b      	ldr	r3, [r3, #8]
 8001cbe:	0a9b      	lsrs	r3, r3, #10
 8001cc0:	f003 0307 	and.w	r3, r3, #7
 8001cc4:	4903      	ldr	r1, [pc, #12]	@ (8001cd4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001cc6:	5ccb      	ldrb	r3, [r1, r3]
 8001cc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	bd80      	pop	{r7, pc}
 8001cd0:	40023800 	.word	0x40023800
 8001cd4:	080033e0 	.word	0x080033e0

08001cd8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001cdc:	f7ff ffdc 	bl	8001c98 <HAL_RCC_GetHCLKFreq>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	4b05      	ldr	r3, [pc, #20]	@ (8001cf8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ce4:	689b      	ldr	r3, [r3, #8]
 8001ce6:	0b5b      	lsrs	r3, r3, #13
 8001ce8:	f003 0307 	and.w	r3, r3, #7
 8001cec:	4903      	ldr	r1, [pc, #12]	@ (8001cfc <HAL_RCC_GetPCLK2Freq+0x24>)
 8001cee:	5ccb      	ldrb	r3, [r1, r3]
 8001cf0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	40023800 	.word	0x40023800
 8001cfc:	080033e0 	.word	0x080033e0

08001d00 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b082      	sub	sp, #8
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d101      	bne.n	8001d12 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	e041      	b.n	8001d96 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d18:	b2db      	uxtb	r3, r3
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d106      	bne.n	8001d2c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2200      	movs	r2, #0
 8001d22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d26:	6878      	ldr	r0, [r7, #4]
 8001d28:	f7fe fdb6 	bl	8000898 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2202      	movs	r2, #2
 8001d30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681a      	ldr	r2, [r3, #0]
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	3304      	adds	r3, #4
 8001d3c:	4619      	mov	r1, r3
 8001d3e:	4610      	mov	r0, r2
 8001d40:	f000 f9c0 	bl	80020c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2201      	movs	r2, #1
 8001d48:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2201      	movs	r2, #1
 8001d50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2201      	movs	r2, #1
 8001d58:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2201      	movs	r2, #1
 8001d60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2201      	movs	r2, #1
 8001d68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2201      	movs	r2, #1
 8001d70:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2201      	movs	r2, #1
 8001d78:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2201      	movs	r2, #1
 8001d80:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2201      	movs	r2, #1
 8001d88:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2201      	movs	r2, #1
 8001d90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001d94:	2300      	movs	r3, #0
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	3708      	adds	r7, #8
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
	...

08001da0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b085      	sub	sp, #20
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001dae:	b2db      	uxtb	r3, r3
 8001db0:	2b01      	cmp	r3, #1
 8001db2:	d001      	beq.n	8001db8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001db4:	2301      	movs	r3, #1
 8001db6:	e04e      	b.n	8001e56 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2202      	movs	r2, #2
 8001dbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	68da      	ldr	r2, [r3, #12]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f042 0201 	orr.w	r2, r2, #1
 8001dce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a23      	ldr	r2, [pc, #140]	@ (8001e64 <HAL_TIM_Base_Start_IT+0xc4>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d022      	beq.n	8001e20 <HAL_TIM_Base_Start_IT+0x80>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001de2:	d01d      	beq.n	8001e20 <HAL_TIM_Base_Start_IT+0x80>
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a1f      	ldr	r2, [pc, #124]	@ (8001e68 <HAL_TIM_Base_Start_IT+0xc8>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d018      	beq.n	8001e20 <HAL_TIM_Base_Start_IT+0x80>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4a1e      	ldr	r2, [pc, #120]	@ (8001e6c <HAL_TIM_Base_Start_IT+0xcc>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d013      	beq.n	8001e20 <HAL_TIM_Base_Start_IT+0x80>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a1c      	ldr	r2, [pc, #112]	@ (8001e70 <HAL_TIM_Base_Start_IT+0xd0>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d00e      	beq.n	8001e20 <HAL_TIM_Base_Start_IT+0x80>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4a1b      	ldr	r2, [pc, #108]	@ (8001e74 <HAL_TIM_Base_Start_IT+0xd4>)
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d009      	beq.n	8001e20 <HAL_TIM_Base_Start_IT+0x80>
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a19      	ldr	r2, [pc, #100]	@ (8001e78 <HAL_TIM_Base_Start_IT+0xd8>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d004      	beq.n	8001e20 <HAL_TIM_Base_Start_IT+0x80>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4a18      	ldr	r2, [pc, #96]	@ (8001e7c <HAL_TIM_Base_Start_IT+0xdc>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d111      	bne.n	8001e44 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	689b      	ldr	r3, [r3, #8]
 8001e26:	f003 0307 	and.w	r3, r3, #7
 8001e2a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	2b06      	cmp	r3, #6
 8001e30:	d010      	beq.n	8001e54 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	681a      	ldr	r2, [r3, #0]
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f042 0201 	orr.w	r2, r2, #1
 8001e40:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e42:	e007      	b.n	8001e54 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	681a      	ldr	r2, [r3, #0]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f042 0201 	orr.w	r2, r2, #1
 8001e52:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001e54:	2300      	movs	r3, #0
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	3714      	adds	r7, #20
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr
 8001e62:	bf00      	nop
 8001e64:	40010000 	.word	0x40010000
 8001e68:	40000400 	.word	0x40000400
 8001e6c:	40000800 	.word	0x40000800
 8001e70:	40000c00 	.word	0x40000c00
 8001e74:	40010400 	.word	0x40010400
 8001e78:	40014000 	.word	0x40014000
 8001e7c:	40001800 	.word	0x40001800

08001e80 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b084      	sub	sp, #16
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	68db      	ldr	r3, [r3, #12]
 8001e8e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	691b      	ldr	r3, [r3, #16]
 8001e96:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001e98:	68bb      	ldr	r3, [r7, #8]
 8001e9a:	f003 0302 	and.w	r3, r3, #2
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d020      	beq.n	8001ee4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	f003 0302 	and.w	r3, r3, #2
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d01b      	beq.n	8001ee4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f06f 0202 	mvn.w	r2, #2
 8001eb4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2201      	movs	r2, #1
 8001eba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	699b      	ldr	r3, [r3, #24]
 8001ec2:	f003 0303 	and.w	r3, r3, #3
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d003      	beq.n	8001ed2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001eca:	6878      	ldr	r0, [r7, #4]
 8001ecc:	f000 f8dc 	bl	8002088 <HAL_TIM_IC_CaptureCallback>
 8001ed0:	e005      	b.n	8001ede <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ed2:	6878      	ldr	r0, [r7, #4]
 8001ed4:	f000 f8ce 	bl	8002074 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ed8:	6878      	ldr	r0, [r7, #4]
 8001eda:	f000 f8df 	bl	800209c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	f003 0304 	and.w	r3, r3, #4
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d020      	beq.n	8001f30 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	f003 0304 	and.w	r3, r3, #4
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d01b      	beq.n	8001f30 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f06f 0204 	mvn.w	r2, #4
 8001f00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2202      	movs	r2, #2
 8001f06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	699b      	ldr	r3, [r3, #24]
 8001f0e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d003      	beq.n	8001f1e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f16:	6878      	ldr	r0, [r7, #4]
 8001f18:	f000 f8b6 	bl	8002088 <HAL_TIM_IC_CaptureCallback>
 8001f1c:	e005      	b.n	8001f2a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f1e:	6878      	ldr	r0, [r7, #4]
 8001f20:	f000 f8a8 	bl	8002074 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f24:	6878      	ldr	r0, [r7, #4]
 8001f26:	f000 f8b9 	bl	800209c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001f30:	68bb      	ldr	r3, [r7, #8]
 8001f32:	f003 0308 	and.w	r3, r3, #8
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d020      	beq.n	8001f7c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	f003 0308 	and.w	r3, r3, #8
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d01b      	beq.n	8001f7c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f06f 0208 	mvn.w	r2, #8
 8001f4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2204      	movs	r2, #4
 8001f52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	69db      	ldr	r3, [r3, #28]
 8001f5a:	f003 0303 	and.w	r3, r3, #3
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d003      	beq.n	8001f6a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f62:	6878      	ldr	r0, [r7, #4]
 8001f64:	f000 f890 	bl	8002088 <HAL_TIM_IC_CaptureCallback>
 8001f68:	e005      	b.n	8001f76 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f6a:	6878      	ldr	r0, [r7, #4]
 8001f6c:	f000 f882 	bl	8002074 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f70:	6878      	ldr	r0, [r7, #4]
 8001f72:	f000 f893 	bl	800209c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2200      	movs	r2, #0
 8001f7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001f7c:	68bb      	ldr	r3, [r7, #8]
 8001f7e:	f003 0310 	and.w	r3, r3, #16
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d020      	beq.n	8001fc8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	f003 0310 	and.w	r3, r3, #16
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d01b      	beq.n	8001fc8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f06f 0210 	mvn.w	r2, #16
 8001f98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2208      	movs	r2, #8
 8001f9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	69db      	ldr	r3, [r3, #28]
 8001fa6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d003      	beq.n	8001fb6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fae:	6878      	ldr	r0, [r7, #4]
 8001fb0:	f000 f86a 	bl	8002088 <HAL_TIM_IC_CaptureCallback>
 8001fb4:	e005      	b.n	8001fc2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fb6:	6878      	ldr	r0, [r7, #4]
 8001fb8:	f000 f85c 	bl	8002074 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fbc:	6878      	ldr	r0, [r7, #4]
 8001fbe:	f000 f86d 	bl	800209c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001fc8:	68bb      	ldr	r3, [r7, #8]
 8001fca:	f003 0301 	and.w	r3, r3, #1
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d00c      	beq.n	8001fec <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	f003 0301 	and.w	r3, r3, #1
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d007      	beq.n	8001fec <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f06f 0201 	mvn.w	r2, #1
 8001fe4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001fe6:	6878      	ldr	r0, [r7, #4]
 8001fe8:	f000 f83a 	bl	8002060 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d00c      	beq.n	8002010 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d007      	beq.n	8002010 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002008:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800200a:	6878      	ldr	r0, [r7, #4]
 800200c:	f000 f986 	bl	800231c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002010:	68bb      	ldr	r3, [r7, #8]
 8002012:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002016:	2b00      	cmp	r3, #0
 8002018:	d00c      	beq.n	8002034 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002020:	2b00      	cmp	r3, #0
 8002022:	d007      	beq.n	8002034 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800202c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800202e:	6878      	ldr	r0, [r7, #4]
 8002030:	f000 f83e 	bl	80020b0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	f003 0320 	and.w	r3, r3, #32
 800203a:	2b00      	cmp	r3, #0
 800203c:	d00c      	beq.n	8002058 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	f003 0320 	and.w	r3, r3, #32
 8002044:	2b00      	cmp	r3, #0
 8002046:	d007      	beq.n	8002058 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f06f 0220 	mvn.w	r2, #32
 8002050:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	f000 f958 	bl	8002308 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002058:	bf00      	nop
 800205a:	3710      	adds	r7, #16
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}

08002060 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002060:	b480      	push	{r7}
 8002062:	b083      	sub	sp, #12
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002068:	bf00      	nop
 800206a:	370c      	adds	r7, #12
 800206c:	46bd      	mov	sp, r7
 800206e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002072:	4770      	bx	lr

08002074 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002074:	b480      	push	{r7}
 8002076:	b083      	sub	sp, #12
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800207c:	bf00      	nop
 800207e:	370c      	adds	r7, #12
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr

08002088 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002088:	b480      	push	{r7}
 800208a:	b083      	sub	sp, #12
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002090:	bf00      	nop
 8002092:	370c      	adds	r7, #12
 8002094:	46bd      	mov	sp, r7
 8002096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209a:	4770      	bx	lr

0800209c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800209c:	b480      	push	{r7}
 800209e:	b083      	sub	sp, #12
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80020a4:	bf00      	nop
 80020a6:	370c      	adds	r7, #12
 80020a8:	46bd      	mov	sp, r7
 80020aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ae:	4770      	bx	lr

080020b0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b083      	sub	sp, #12
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80020b8:	bf00      	nop
 80020ba:	370c      	adds	r7, #12
 80020bc:	46bd      	mov	sp, r7
 80020be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c2:	4770      	bx	lr

080020c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b085      	sub	sp, #20
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
 80020cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	4a43      	ldr	r2, [pc, #268]	@ (80021e4 <TIM_Base_SetConfig+0x120>)
 80020d8:	4293      	cmp	r3, r2
 80020da:	d013      	beq.n	8002104 <TIM_Base_SetConfig+0x40>
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80020e2:	d00f      	beq.n	8002104 <TIM_Base_SetConfig+0x40>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	4a40      	ldr	r2, [pc, #256]	@ (80021e8 <TIM_Base_SetConfig+0x124>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d00b      	beq.n	8002104 <TIM_Base_SetConfig+0x40>
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	4a3f      	ldr	r2, [pc, #252]	@ (80021ec <TIM_Base_SetConfig+0x128>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d007      	beq.n	8002104 <TIM_Base_SetConfig+0x40>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	4a3e      	ldr	r2, [pc, #248]	@ (80021f0 <TIM_Base_SetConfig+0x12c>)
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d003      	beq.n	8002104 <TIM_Base_SetConfig+0x40>
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	4a3d      	ldr	r2, [pc, #244]	@ (80021f4 <TIM_Base_SetConfig+0x130>)
 8002100:	4293      	cmp	r3, r2
 8002102:	d108      	bne.n	8002116 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800210a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	68fa      	ldr	r2, [r7, #12]
 8002112:	4313      	orrs	r3, r2
 8002114:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	4a32      	ldr	r2, [pc, #200]	@ (80021e4 <TIM_Base_SetConfig+0x120>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d02b      	beq.n	8002176 <TIM_Base_SetConfig+0xb2>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002124:	d027      	beq.n	8002176 <TIM_Base_SetConfig+0xb2>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	4a2f      	ldr	r2, [pc, #188]	@ (80021e8 <TIM_Base_SetConfig+0x124>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d023      	beq.n	8002176 <TIM_Base_SetConfig+0xb2>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	4a2e      	ldr	r2, [pc, #184]	@ (80021ec <TIM_Base_SetConfig+0x128>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d01f      	beq.n	8002176 <TIM_Base_SetConfig+0xb2>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	4a2d      	ldr	r2, [pc, #180]	@ (80021f0 <TIM_Base_SetConfig+0x12c>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d01b      	beq.n	8002176 <TIM_Base_SetConfig+0xb2>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	4a2c      	ldr	r2, [pc, #176]	@ (80021f4 <TIM_Base_SetConfig+0x130>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d017      	beq.n	8002176 <TIM_Base_SetConfig+0xb2>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	4a2b      	ldr	r2, [pc, #172]	@ (80021f8 <TIM_Base_SetConfig+0x134>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d013      	beq.n	8002176 <TIM_Base_SetConfig+0xb2>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	4a2a      	ldr	r2, [pc, #168]	@ (80021fc <TIM_Base_SetConfig+0x138>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d00f      	beq.n	8002176 <TIM_Base_SetConfig+0xb2>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	4a29      	ldr	r2, [pc, #164]	@ (8002200 <TIM_Base_SetConfig+0x13c>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d00b      	beq.n	8002176 <TIM_Base_SetConfig+0xb2>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	4a28      	ldr	r2, [pc, #160]	@ (8002204 <TIM_Base_SetConfig+0x140>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d007      	beq.n	8002176 <TIM_Base_SetConfig+0xb2>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	4a27      	ldr	r2, [pc, #156]	@ (8002208 <TIM_Base_SetConfig+0x144>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d003      	beq.n	8002176 <TIM_Base_SetConfig+0xb2>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	4a26      	ldr	r2, [pc, #152]	@ (800220c <TIM_Base_SetConfig+0x148>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d108      	bne.n	8002188 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800217c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	68db      	ldr	r3, [r3, #12]
 8002182:	68fa      	ldr	r2, [r7, #12]
 8002184:	4313      	orrs	r3, r2
 8002186:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	695b      	ldr	r3, [r3, #20]
 8002192:	4313      	orrs	r3, r2
 8002194:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	689a      	ldr	r2, [r3, #8]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	681a      	ldr	r2, [r3, #0]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	4a0e      	ldr	r2, [pc, #56]	@ (80021e4 <TIM_Base_SetConfig+0x120>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d003      	beq.n	80021b6 <TIM_Base_SetConfig+0xf2>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	4a10      	ldr	r2, [pc, #64]	@ (80021f4 <TIM_Base_SetConfig+0x130>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d103      	bne.n	80021be <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	691a      	ldr	r2, [r3, #16]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f043 0204 	orr.w	r2, r3, #4
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2201      	movs	r2, #1
 80021ce:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	68fa      	ldr	r2, [r7, #12]
 80021d4:	601a      	str	r2, [r3, #0]
}
 80021d6:	bf00      	nop
 80021d8:	3714      	adds	r7, #20
 80021da:	46bd      	mov	sp, r7
 80021dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e0:	4770      	bx	lr
 80021e2:	bf00      	nop
 80021e4:	40010000 	.word	0x40010000
 80021e8:	40000400 	.word	0x40000400
 80021ec:	40000800 	.word	0x40000800
 80021f0:	40000c00 	.word	0x40000c00
 80021f4:	40010400 	.word	0x40010400
 80021f8:	40014000 	.word	0x40014000
 80021fc:	40014400 	.word	0x40014400
 8002200:	40014800 	.word	0x40014800
 8002204:	40001800 	.word	0x40001800
 8002208:	40001c00 	.word	0x40001c00
 800220c:	40002000 	.word	0x40002000

08002210 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002210:	b480      	push	{r7}
 8002212:	b085      	sub	sp, #20
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
 8002218:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002220:	2b01      	cmp	r3, #1
 8002222:	d101      	bne.n	8002228 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002224:	2302      	movs	r3, #2
 8002226:	e05a      	b.n	80022de <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2201      	movs	r2, #1
 800222c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2202      	movs	r2, #2
 8002234:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	689b      	ldr	r3, [r3, #8]
 8002246:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800224e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	68fa      	ldr	r2, [r7, #12]
 8002256:	4313      	orrs	r3, r2
 8002258:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	68fa      	ldr	r2, [r7, #12]
 8002260:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a21      	ldr	r2, [pc, #132]	@ (80022ec <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d022      	beq.n	80022b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002274:	d01d      	beq.n	80022b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a1d      	ldr	r2, [pc, #116]	@ (80022f0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d018      	beq.n	80022b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a1b      	ldr	r2, [pc, #108]	@ (80022f4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d013      	beq.n	80022b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a1a      	ldr	r2, [pc, #104]	@ (80022f8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d00e      	beq.n	80022b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a18      	ldr	r2, [pc, #96]	@ (80022fc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d009      	beq.n	80022b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4a17      	ldr	r2, [pc, #92]	@ (8002300 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d004      	beq.n	80022b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a15      	ldr	r2, [pc, #84]	@ (8002304 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d10c      	bne.n	80022cc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80022b2:	68bb      	ldr	r3, [r7, #8]
 80022b4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80022b8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	68ba      	ldr	r2, [r7, #8]
 80022c0:	4313      	orrs	r3, r2
 80022c2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	68ba      	ldr	r2, [r7, #8]
 80022ca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2201      	movs	r2, #1
 80022d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2200      	movs	r2, #0
 80022d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80022dc:	2300      	movs	r3, #0
}
 80022de:	4618      	mov	r0, r3
 80022e0:	3714      	adds	r7, #20
 80022e2:	46bd      	mov	sp, r7
 80022e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e8:	4770      	bx	lr
 80022ea:	bf00      	nop
 80022ec:	40010000 	.word	0x40010000
 80022f0:	40000400 	.word	0x40000400
 80022f4:	40000800 	.word	0x40000800
 80022f8:	40000c00 	.word	0x40000c00
 80022fc:	40010400 	.word	0x40010400
 8002300:	40014000 	.word	0x40014000
 8002304:	40001800 	.word	0x40001800

08002308 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002308:	b480      	push	{r7}
 800230a:	b083      	sub	sp, #12
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002310:	bf00      	nop
 8002312:	370c      	adds	r7, #12
 8002314:	46bd      	mov	sp, r7
 8002316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231a:	4770      	bx	lr

0800231c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800231c:	b480      	push	{r7}
 800231e:	b083      	sub	sp, #12
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002324:	bf00      	nop
 8002326:	370c      	adds	r7, #12
 8002328:	46bd      	mov	sp, r7
 800232a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232e:	4770      	bx	lr

08002330 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b082      	sub	sp, #8
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d101      	bne.n	8002342 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	e042      	b.n	80023c8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002348:	b2db      	uxtb	r3, r3
 800234a:	2b00      	cmp	r3, #0
 800234c:	d106      	bne.n	800235c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2200      	movs	r2, #0
 8002352:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002356:	6878      	ldr	r0, [r7, #4]
 8002358:	f7fe fac6 	bl	80008e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2224      	movs	r2, #36	@ 0x24
 8002360:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	68da      	ldr	r2, [r3, #12]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002372:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002374:	6878      	ldr	r0, [r7, #4]
 8002376:	f000 fd7f 	bl	8002e78 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	691a      	ldr	r2, [r3, #16]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002388:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	695a      	ldr	r2, [r3, #20]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002398:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	68da      	ldr	r2, [r3, #12]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80023a8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2200      	movs	r2, #0
 80023ae:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2220      	movs	r2, #32
 80023b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2220      	movs	r2, #32
 80023bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2200      	movs	r2, #0
 80023c4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80023c6:	2300      	movs	r3, #0
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	3708      	adds	r7, #8
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}

080023d0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b08a      	sub	sp, #40	@ 0x28
 80023d4:	af02      	add	r7, sp, #8
 80023d6:	60f8      	str	r0, [r7, #12]
 80023d8:	60b9      	str	r1, [r7, #8]
 80023da:	603b      	str	r3, [r7, #0]
 80023dc:	4613      	mov	r3, r2
 80023de:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80023e0:	2300      	movs	r3, #0
 80023e2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80023ea:	b2db      	uxtb	r3, r3
 80023ec:	2b20      	cmp	r3, #32
 80023ee:	d175      	bne.n	80024dc <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d002      	beq.n	80023fc <HAL_UART_Transmit+0x2c>
 80023f6:	88fb      	ldrh	r3, [r7, #6]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d101      	bne.n	8002400 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80023fc:	2301      	movs	r3, #1
 80023fe:	e06e      	b.n	80024de <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	2200      	movs	r2, #0
 8002404:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	2221      	movs	r2, #33	@ 0x21
 800240a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800240e:	f7fe fbf9 	bl	8000c04 <HAL_GetTick>
 8002412:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	88fa      	ldrh	r2, [r7, #6]
 8002418:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	88fa      	ldrh	r2, [r7, #6]
 800241e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	689b      	ldr	r3, [r3, #8]
 8002424:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002428:	d108      	bne.n	800243c <HAL_UART_Transmit+0x6c>
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	691b      	ldr	r3, [r3, #16]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d104      	bne.n	800243c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002432:	2300      	movs	r3, #0
 8002434:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002436:	68bb      	ldr	r3, [r7, #8]
 8002438:	61bb      	str	r3, [r7, #24]
 800243a:	e003      	b.n	8002444 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002440:	2300      	movs	r3, #0
 8002442:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002444:	e02e      	b.n	80024a4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	9300      	str	r3, [sp, #0]
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	2200      	movs	r2, #0
 800244e:	2180      	movs	r1, #128	@ 0x80
 8002450:	68f8      	ldr	r0, [r7, #12]
 8002452:	f000 fb1d 	bl	8002a90 <UART_WaitOnFlagUntilTimeout>
 8002456:	4603      	mov	r3, r0
 8002458:	2b00      	cmp	r3, #0
 800245a:	d005      	beq.n	8002468 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	2220      	movs	r2, #32
 8002460:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002464:	2303      	movs	r3, #3
 8002466:	e03a      	b.n	80024de <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002468:	69fb      	ldr	r3, [r7, #28]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d10b      	bne.n	8002486 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800246e:	69bb      	ldr	r3, [r7, #24]
 8002470:	881b      	ldrh	r3, [r3, #0]
 8002472:	461a      	mov	r2, r3
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800247c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800247e:	69bb      	ldr	r3, [r7, #24]
 8002480:	3302      	adds	r3, #2
 8002482:	61bb      	str	r3, [r7, #24]
 8002484:	e007      	b.n	8002496 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002486:	69fb      	ldr	r3, [r7, #28]
 8002488:	781a      	ldrb	r2, [r3, #0]
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002490:	69fb      	ldr	r3, [r7, #28]
 8002492:	3301      	adds	r3, #1
 8002494:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800249a:	b29b      	uxth	r3, r3
 800249c:	3b01      	subs	r3, #1
 800249e:	b29a      	uxth	r2, r3
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80024a8:	b29b      	uxth	r3, r3
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d1cb      	bne.n	8002446 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	9300      	str	r3, [sp, #0]
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	2200      	movs	r2, #0
 80024b6:	2140      	movs	r1, #64	@ 0x40
 80024b8:	68f8      	ldr	r0, [r7, #12]
 80024ba:	f000 fae9 	bl	8002a90 <UART_WaitOnFlagUntilTimeout>
 80024be:	4603      	mov	r3, r0
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d005      	beq.n	80024d0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	2220      	movs	r2, #32
 80024c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80024cc:	2303      	movs	r3, #3
 80024ce:	e006      	b.n	80024de <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	2220      	movs	r2, #32
 80024d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80024d8:	2300      	movs	r3, #0
 80024da:	e000      	b.n	80024de <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80024dc:	2302      	movs	r3, #2
  }
}
 80024de:	4618      	mov	r0, r3
 80024e0:	3720      	adds	r7, #32
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}
	...

080024e8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b0ba      	sub	sp, #232	@ 0xe8
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	68db      	ldr	r3, [r3, #12]
 8002500:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	695b      	ldr	r3, [r3, #20]
 800250a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800250e:	2300      	movs	r3, #0
 8002510:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002514:	2300      	movs	r3, #0
 8002516:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800251a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800251e:	f003 030f 	and.w	r3, r3, #15
 8002522:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8002526:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800252a:	2b00      	cmp	r3, #0
 800252c:	d10f      	bne.n	800254e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800252e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002532:	f003 0320 	and.w	r3, r3, #32
 8002536:	2b00      	cmp	r3, #0
 8002538:	d009      	beq.n	800254e <HAL_UART_IRQHandler+0x66>
 800253a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800253e:	f003 0320 	and.w	r3, r3, #32
 8002542:	2b00      	cmp	r3, #0
 8002544:	d003      	beq.n	800254e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002546:	6878      	ldr	r0, [r7, #4]
 8002548:	f000 fbd7 	bl	8002cfa <UART_Receive_IT>
      return;
 800254c:	e273      	b.n	8002a36 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800254e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002552:	2b00      	cmp	r3, #0
 8002554:	f000 80de 	beq.w	8002714 <HAL_UART_IRQHandler+0x22c>
 8002558:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800255c:	f003 0301 	and.w	r3, r3, #1
 8002560:	2b00      	cmp	r3, #0
 8002562:	d106      	bne.n	8002572 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002564:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002568:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800256c:	2b00      	cmp	r3, #0
 800256e:	f000 80d1 	beq.w	8002714 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002572:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002576:	f003 0301 	and.w	r3, r3, #1
 800257a:	2b00      	cmp	r3, #0
 800257c:	d00b      	beq.n	8002596 <HAL_UART_IRQHandler+0xae>
 800257e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002582:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002586:	2b00      	cmp	r3, #0
 8002588:	d005      	beq.n	8002596 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800258e:	f043 0201 	orr.w	r2, r3, #1
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002596:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800259a:	f003 0304 	and.w	r3, r3, #4
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d00b      	beq.n	80025ba <HAL_UART_IRQHandler+0xd2>
 80025a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80025a6:	f003 0301 	and.w	r3, r3, #1
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d005      	beq.n	80025ba <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025b2:	f043 0202 	orr.w	r2, r3, #2
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80025ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80025be:	f003 0302 	and.w	r3, r3, #2
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d00b      	beq.n	80025de <HAL_UART_IRQHandler+0xf6>
 80025c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80025ca:	f003 0301 	and.w	r3, r3, #1
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d005      	beq.n	80025de <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025d6:	f043 0204 	orr.w	r2, r3, #4
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80025de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80025e2:	f003 0308 	and.w	r3, r3, #8
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d011      	beq.n	800260e <HAL_UART_IRQHandler+0x126>
 80025ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80025ee:	f003 0320 	and.w	r3, r3, #32
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d105      	bne.n	8002602 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80025f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80025fa:	f003 0301 	and.w	r3, r3, #1
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d005      	beq.n	800260e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002606:	f043 0208 	orr.w	r2, r3, #8
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002612:	2b00      	cmp	r3, #0
 8002614:	f000 820a 	beq.w	8002a2c <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002618:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800261c:	f003 0320 	and.w	r3, r3, #32
 8002620:	2b00      	cmp	r3, #0
 8002622:	d008      	beq.n	8002636 <HAL_UART_IRQHandler+0x14e>
 8002624:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002628:	f003 0320 	and.w	r3, r3, #32
 800262c:	2b00      	cmp	r3, #0
 800262e:	d002      	beq.n	8002636 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002630:	6878      	ldr	r0, [r7, #4]
 8002632:	f000 fb62 	bl	8002cfa <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	695b      	ldr	r3, [r3, #20]
 800263c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002640:	2b40      	cmp	r3, #64	@ 0x40
 8002642:	bf0c      	ite	eq
 8002644:	2301      	moveq	r3, #1
 8002646:	2300      	movne	r3, #0
 8002648:	b2db      	uxtb	r3, r3
 800264a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002652:	f003 0308 	and.w	r3, r3, #8
 8002656:	2b00      	cmp	r3, #0
 8002658:	d103      	bne.n	8002662 <HAL_UART_IRQHandler+0x17a>
 800265a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800265e:	2b00      	cmp	r3, #0
 8002660:	d04f      	beq.n	8002702 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002662:	6878      	ldr	r0, [r7, #4]
 8002664:	f000 fa6d 	bl	8002b42 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	695b      	ldr	r3, [r3, #20]
 800266e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002672:	2b40      	cmp	r3, #64	@ 0x40
 8002674:	d141      	bne.n	80026fa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	3314      	adds	r3, #20
 800267c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002680:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002684:	e853 3f00 	ldrex	r3, [r3]
 8002688:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800268c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002690:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002694:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	3314      	adds	r3, #20
 800269e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80026a2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80026a6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026aa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80026ae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80026b2:	e841 2300 	strex	r3, r2, [r1]
 80026b6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80026ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d1d9      	bne.n	8002676 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d013      	beq.n	80026f2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026ce:	4a8a      	ldr	r2, [pc, #552]	@ (80028f8 <HAL_UART_IRQHandler+0x410>)
 80026d0:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026d6:	4618      	mov	r0, r3
 80026d8:	f7fe fc45 	bl	8000f66 <HAL_DMA_Abort_IT>
 80026dc:	4603      	mov	r3, r0
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d016      	beq.n	8002710 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80026e8:	687a      	ldr	r2, [r7, #4]
 80026ea:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80026ec:	4610      	mov	r0, r2
 80026ee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026f0:	e00e      	b.n	8002710 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80026f2:	6878      	ldr	r0, [r7, #4]
 80026f4:	f000 f9b6 	bl	8002a64 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026f8:	e00a      	b.n	8002710 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80026fa:	6878      	ldr	r0, [r7, #4]
 80026fc:	f000 f9b2 	bl	8002a64 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002700:	e006      	b.n	8002710 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002702:	6878      	ldr	r0, [r7, #4]
 8002704:	f000 f9ae 	bl	8002a64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2200      	movs	r2, #0
 800270c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800270e:	e18d      	b.n	8002a2c <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002710:	bf00      	nop
    return;
 8002712:	e18b      	b.n	8002a2c <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002718:	2b01      	cmp	r3, #1
 800271a:	f040 8167 	bne.w	80029ec <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800271e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002722:	f003 0310 	and.w	r3, r3, #16
 8002726:	2b00      	cmp	r3, #0
 8002728:	f000 8160 	beq.w	80029ec <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 800272c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002730:	f003 0310 	and.w	r3, r3, #16
 8002734:	2b00      	cmp	r3, #0
 8002736:	f000 8159 	beq.w	80029ec <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800273a:	2300      	movs	r3, #0
 800273c:	60bb      	str	r3, [r7, #8]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	60bb      	str	r3, [r7, #8]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	60bb      	str	r3, [r7, #8]
 800274e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	695b      	ldr	r3, [r3, #20]
 8002756:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800275a:	2b40      	cmp	r3, #64	@ 0x40
 800275c:	f040 80ce 	bne.w	80028fc <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800276c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002770:	2b00      	cmp	r3, #0
 8002772:	f000 80a9 	beq.w	80028c8 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800277a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800277e:	429a      	cmp	r2, r3
 8002780:	f080 80a2 	bcs.w	80028c8 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800278a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002790:	69db      	ldr	r3, [r3, #28]
 8002792:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002796:	f000 8088 	beq.w	80028aa <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	330c      	adds	r3, #12
 80027a0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027a4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80027a8:	e853 3f00 	ldrex	r3, [r3]
 80027ac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80027b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80027b4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80027b8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	330c      	adds	r3, #12
 80027c2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80027c6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80027ca:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027ce:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80027d2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80027d6:	e841 2300 	strex	r3, r2, [r1]
 80027da:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80027de:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d1d9      	bne.n	800279a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	3314      	adds	r3, #20
 80027ec:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027ee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80027f0:	e853 3f00 	ldrex	r3, [r3]
 80027f4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80027f6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80027f8:	f023 0301 	bic.w	r3, r3, #1
 80027fc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	3314      	adds	r3, #20
 8002806:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800280a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800280e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002810:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002812:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002816:	e841 2300 	strex	r3, r2, [r1]
 800281a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800281c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800281e:	2b00      	cmp	r3, #0
 8002820:	d1e1      	bne.n	80027e6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	3314      	adds	r3, #20
 8002828:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800282a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800282c:	e853 3f00 	ldrex	r3, [r3]
 8002830:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002832:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002834:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002838:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	3314      	adds	r3, #20
 8002842:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002846:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002848:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800284a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800284c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800284e:	e841 2300 	strex	r3, r2, [r1]
 8002852:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002854:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002856:	2b00      	cmp	r3, #0
 8002858:	d1e3      	bne.n	8002822 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2220      	movs	r2, #32
 800285e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2200      	movs	r2, #0
 8002866:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	330c      	adds	r3, #12
 800286e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002870:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002872:	e853 3f00 	ldrex	r3, [r3]
 8002876:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002878:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800287a:	f023 0310 	bic.w	r3, r3, #16
 800287e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	330c      	adds	r3, #12
 8002888:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800288c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800288e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002890:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002892:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002894:	e841 2300 	strex	r3, r2, [r1]
 8002898:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800289a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800289c:	2b00      	cmp	r3, #0
 800289e:	d1e3      	bne.n	8002868 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028a4:	4618      	mov	r0, r3
 80028a6:	f7fe faee 	bl	8000e86 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2202      	movs	r2, #2
 80028ae:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80028b8:	b29b      	uxth	r3, r3
 80028ba:	1ad3      	subs	r3, r2, r3
 80028bc:	b29b      	uxth	r3, r3
 80028be:	4619      	mov	r1, r3
 80028c0:	6878      	ldr	r0, [r7, #4]
 80028c2:	f000 f8d9 	bl	8002a78 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80028c6:	e0b3      	b.n	8002a30 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80028cc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80028d0:	429a      	cmp	r2, r3
 80028d2:	f040 80ad 	bne.w	8002a30 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028da:	69db      	ldr	r3, [r3, #28]
 80028dc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80028e0:	f040 80a6 	bne.w	8002a30 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2202      	movs	r2, #2
 80028e8:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80028ee:	4619      	mov	r1, r3
 80028f0:	6878      	ldr	r0, [r7, #4]
 80028f2:	f000 f8c1 	bl	8002a78 <HAL_UARTEx_RxEventCallback>
      return;
 80028f6:	e09b      	b.n	8002a30 <HAL_UART_IRQHandler+0x548>
 80028f8:	08002c09 	.word	0x08002c09
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002904:	b29b      	uxth	r3, r3
 8002906:	1ad3      	subs	r3, r2, r3
 8002908:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002910:	b29b      	uxth	r3, r3
 8002912:	2b00      	cmp	r3, #0
 8002914:	f000 808e 	beq.w	8002a34 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8002918:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800291c:	2b00      	cmp	r3, #0
 800291e:	f000 8089 	beq.w	8002a34 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	330c      	adds	r3, #12
 8002928:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800292a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800292c:	e853 3f00 	ldrex	r3, [r3]
 8002930:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002932:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002934:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002938:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	330c      	adds	r3, #12
 8002942:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8002946:	647a      	str	r2, [r7, #68]	@ 0x44
 8002948:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800294a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800294c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800294e:	e841 2300 	strex	r3, r2, [r1]
 8002952:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002954:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002956:	2b00      	cmp	r3, #0
 8002958:	d1e3      	bne.n	8002922 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	3314      	adds	r3, #20
 8002960:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002962:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002964:	e853 3f00 	ldrex	r3, [r3]
 8002968:	623b      	str	r3, [r7, #32]
   return(result);
 800296a:	6a3b      	ldr	r3, [r7, #32]
 800296c:	f023 0301 	bic.w	r3, r3, #1
 8002970:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	3314      	adds	r3, #20
 800297a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800297e:	633a      	str	r2, [r7, #48]	@ 0x30
 8002980:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002982:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002984:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002986:	e841 2300 	strex	r3, r2, [r1]
 800298a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800298c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800298e:	2b00      	cmp	r3, #0
 8002990:	d1e3      	bne.n	800295a <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2220      	movs	r2, #32
 8002996:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2200      	movs	r2, #0
 800299e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	330c      	adds	r3, #12
 80029a6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029a8:	693b      	ldr	r3, [r7, #16]
 80029aa:	e853 3f00 	ldrex	r3, [r3]
 80029ae:	60fb      	str	r3, [r7, #12]
   return(result);
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	f023 0310 	bic.w	r3, r3, #16
 80029b6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	330c      	adds	r3, #12
 80029c0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80029c4:	61fa      	str	r2, [r7, #28]
 80029c6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029c8:	69b9      	ldr	r1, [r7, #24]
 80029ca:	69fa      	ldr	r2, [r7, #28]
 80029cc:	e841 2300 	strex	r3, r2, [r1]
 80029d0:	617b      	str	r3, [r7, #20]
   return(result);
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d1e3      	bne.n	80029a0 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2202      	movs	r2, #2
 80029dc:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80029de:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80029e2:	4619      	mov	r1, r3
 80029e4:	6878      	ldr	r0, [r7, #4]
 80029e6:	f000 f847 	bl	8002a78 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80029ea:	e023      	b.n	8002a34 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80029ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80029f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d009      	beq.n	8002a0c <HAL_UART_IRQHandler+0x524>
 80029f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80029fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d003      	beq.n	8002a0c <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8002a04:	6878      	ldr	r0, [r7, #4]
 8002a06:	f000 f910 	bl	8002c2a <UART_Transmit_IT>
    return;
 8002a0a:	e014      	b.n	8002a36 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002a0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d00e      	beq.n	8002a36 <HAL_UART_IRQHandler+0x54e>
 8002a18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002a1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d008      	beq.n	8002a36 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8002a24:	6878      	ldr	r0, [r7, #4]
 8002a26:	f000 f950 	bl	8002cca <UART_EndTransmit_IT>
    return;
 8002a2a:	e004      	b.n	8002a36 <HAL_UART_IRQHandler+0x54e>
    return;
 8002a2c:	bf00      	nop
 8002a2e:	e002      	b.n	8002a36 <HAL_UART_IRQHandler+0x54e>
      return;
 8002a30:	bf00      	nop
 8002a32:	e000      	b.n	8002a36 <HAL_UART_IRQHandler+0x54e>
      return;
 8002a34:	bf00      	nop
  }
}
 8002a36:	37e8      	adds	r7, #232	@ 0xe8
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bd80      	pop	{r7, pc}

08002a3c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b083      	sub	sp, #12
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002a44:	bf00      	nop
 8002a46:	370c      	adds	r7, #12
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4e:	4770      	bx	lr

08002a50 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b083      	sub	sp, #12
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002a58:	bf00      	nop
 8002a5a:	370c      	adds	r7, #12
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a62:	4770      	bx	lr

08002a64 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002a64:	b480      	push	{r7}
 8002a66:	b083      	sub	sp, #12
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002a6c:	bf00      	nop
 8002a6e:	370c      	adds	r7, #12
 8002a70:	46bd      	mov	sp, r7
 8002a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a76:	4770      	bx	lr

08002a78 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b083      	sub	sp, #12
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
 8002a80:	460b      	mov	r3, r1
 8002a82:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002a84:	bf00      	nop
 8002a86:	370c      	adds	r7, #12
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8e:	4770      	bx	lr

08002a90 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b086      	sub	sp, #24
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	60f8      	str	r0, [r7, #12]
 8002a98:	60b9      	str	r1, [r7, #8]
 8002a9a:	603b      	str	r3, [r7, #0]
 8002a9c:	4613      	mov	r3, r2
 8002a9e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002aa0:	e03b      	b.n	8002b1a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002aa2:	6a3b      	ldr	r3, [r7, #32]
 8002aa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002aa8:	d037      	beq.n	8002b1a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002aaa:	f7fe f8ab 	bl	8000c04 <HAL_GetTick>
 8002aae:	4602      	mov	r2, r0
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	1ad3      	subs	r3, r2, r3
 8002ab4:	6a3a      	ldr	r2, [r7, #32]
 8002ab6:	429a      	cmp	r2, r3
 8002ab8:	d302      	bcc.n	8002ac0 <UART_WaitOnFlagUntilTimeout+0x30>
 8002aba:	6a3b      	ldr	r3, [r7, #32]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d101      	bne.n	8002ac4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002ac0:	2303      	movs	r3, #3
 8002ac2:	e03a      	b.n	8002b3a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	68db      	ldr	r3, [r3, #12]
 8002aca:	f003 0304 	and.w	r3, r3, #4
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d023      	beq.n	8002b1a <UART_WaitOnFlagUntilTimeout+0x8a>
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	2b80      	cmp	r3, #128	@ 0x80
 8002ad6:	d020      	beq.n	8002b1a <UART_WaitOnFlagUntilTimeout+0x8a>
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	2b40      	cmp	r3, #64	@ 0x40
 8002adc:	d01d      	beq.n	8002b1a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f003 0308 	and.w	r3, r3, #8
 8002ae8:	2b08      	cmp	r3, #8
 8002aea:	d116      	bne.n	8002b1a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002aec:	2300      	movs	r3, #0
 8002aee:	617b      	str	r3, [r7, #20]
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	617b      	str	r3, [r7, #20]
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	617b      	str	r3, [r7, #20]
 8002b00:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002b02:	68f8      	ldr	r0, [r7, #12]
 8002b04:	f000 f81d 	bl	8002b42 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	2208      	movs	r2, #8
 8002b0c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	2200      	movs	r2, #0
 8002b12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	e00f      	b.n	8002b3a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	681a      	ldr	r2, [r3, #0]
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	4013      	ands	r3, r2
 8002b24:	68ba      	ldr	r2, [r7, #8]
 8002b26:	429a      	cmp	r2, r3
 8002b28:	bf0c      	ite	eq
 8002b2a:	2301      	moveq	r3, #1
 8002b2c:	2300      	movne	r3, #0
 8002b2e:	b2db      	uxtb	r3, r3
 8002b30:	461a      	mov	r2, r3
 8002b32:	79fb      	ldrb	r3, [r7, #7]
 8002b34:	429a      	cmp	r2, r3
 8002b36:	d0b4      	beq.n	8002aa2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002b38:	2300      	movs	r3, #0
}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	3718      	adds	r7, #24
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}

08002b42 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002b42:	b480      	push	{r7}
 8002b44:	b095      	sub	sp, #84	@ 0x54
 8002b46:	af00      	add	r7, sp, #0
 8002b48:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	330c      	adds	r3, #12
 8002b50:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b54:	e853 3f00 	ldrex	r3, [r3]
 8002b58:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002b5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b5c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002b60:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	330c      	adds	r3, #12
 8002b68:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002b6a:	643a      	str	r2, [r7, #64]	@ 0x40
 8002b6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b6e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002b70:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002b72:	e841 2300 	strex	r3, r2, [r1]
 8002b76:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002b78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d1e5      	bne.n	8002b4a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	3314      	adds	r3, #20
 8002b84:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b86:	6a3b      	ldr	r3, [r7, #32]
 8002b88:	e853 3f00 	ldrex	r3, [r3]
 8002b8c:	61fb      	str	r3, [r7, #28]
   return(result);
 8002b8e:	69fb      	ldr	r3, [r7, #28]
 8002b90:	f023 0301 	bic.w	r3, r3, #1
 8002b94:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	3314      	adds	r3, #20
 8002b9c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002b9e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002ba0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ba2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002ba4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002ba6:	e841 2300 	strex	r3, r2, [r1]
 8002baa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002bac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d1e5      	bne.n	8002b7e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bb6:	2b01      	cmp	r3, #1
 8002bb8:	d119      	bne.n	8002bee <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	330c      	adds	r3, #12
 8002bc0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	e853 3f00 	ldrex	r3, [r3]
 8002bc8:	60bb      	str	r3, [r7, #8]
   return(result);
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	f023 0310 	bic.w	r3, r3, #16
 8002bd0:	647b      	str	r3, [r7, #68]	@ 0x44
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	330c      	adds	r3, #12
 8002bd8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002bda:	61ba      	str	r2, [r7, #24]
 8002bdc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bde:	6979      	ldr	r1, [r7, #20]
 8002be0:	69ba      	ldr	r2, [r7, #24]
 8002be2:	e841 2300 	strex	r3, r2, [r1]
 8002be6:	613b      	str	r3, [r7, #16]
   return(result);
 8002be8:	693b      	ldr	r3, [r7, #16]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d1e5      	bne.n	8002bba <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2220      	movs	r2, #32
 8002bf2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002bfc:	bf00      	nop
 8002bfe:	3754      	adds	r7, #84	@ 0x54
 8002c00:	46bd      	mov	sp, r7
 8002c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c06:	4770      	bx	lr

08002c08 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b084      	sub	sp, #16
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c14:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002c1c:	68f8      	ldr	r0, [r7, #12]
 8002c1e:	f7ff ff21 	bl	8002a64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002c22:	bf00      	nop
 8002c24:	3710      	adds	r7, #16
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}

08002c2a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002c2a:	b480      	push	{r7}
 8002c2c:	b085      	sub	sp, #20
 8002c2e:	af00      	add	r7, sp, #0
 8002c30:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c38:	b2db      	uxtb	r3, r3
 8002c3a:	2b21      	cmp	r3, #33	@ 0x21
 8002c3c:	d13e      	bne.n	8002cbc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	689b      	ldr	r3, [r3, #8]
 8002c42:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c46:	d114      	bne.n	8002c72 <UART_Transmit_IT+0x48>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	691b      	ldr	r3, [r3, #16]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d110      	bne.n	8002c72 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6a1b      	ldr	r3, [r3, #32]
 8002c54:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	881b      	ldrh	r3, [r3, #0]
 8002c5a:	461a      	mov	r2, r3
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002c64:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6a1b      	ldr	r3, [r3, #32]
 8002c6a:	1c9a      	adds	r2, r3, #2
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	621a      	str	r2, [r3, #32]
 8002c70:	e008      	b.n	8002c84 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6a1b      	ldr	r3, [r3, #32]
 8002c76:	1c59      	adds	r1, r3, #1
 8002c78:	687a      	ldr	r2, [r7, #4]
 8002c7a:	6211      	str	r1, [r2, #32]
 8002c7c:	781a      	ldrb	r2, [r3, #0]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002c88:	b29b      	uxth	r3, r3
 8002c8a:	3b01      	subs	r3, #1
 8002c8c:	b29b      	uxth	r3, r3
 8002c8e:	687a      	ldr	r2, [r7, #4]
 8002c90:	4619      	mov	r1, r3
 8002c92:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d10f      	bne.n	8002cb8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	68da      	ldr	r2, [r3, #12]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002ca6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	68da      	ldr	r2, [r3, #12]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002cb6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	e000      	b.n	8002cbe <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002cbc:	2302      	movs	r3, #2
  }
}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	3714      	adds	r7, #20
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc8:	4770      	bx	lr

08002cca <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002cca:	b580      	push	{r7, lr}
 8002ccc:	b082      	sub	sp, #8
 8002cce:	af00      	add	r7, sp, #0
 8002cd0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	68da      	ldr	r2, [r3, #12]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002ce0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2220      	movs	r2, #32
 8002ce6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002cea:	6878      	ldr	r0, [r7, #4]
 8002cec:	f7ff fea6 	bl	8002a3c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002cf0:	2300      	movs	r3, #0
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	3708      	adds	r7, #8
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}

08002cfa <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002cfa:	b580      	push	{r7, lr}
 8002cfc:	b08c      	sub	sp, #48	@ 0x30
 8002cfe:	af00      	add	r7, sp, #0
 8002d00:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8002d02:	2300      	movs	r3, #0
 8002d04:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8002d06:	2300      	movs	r3, #0
 8002d08:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002d10:	b2db      	uxtb	r3, r3
 8002d12:	2b22      	cmp	r3, #34	@ 0x22
 8002d14:	f040 80aa 	bne.w	8002e6c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d20:	d115      	bne.n	8002d4e <UART_Receive_IT+0x54>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	691b      	ldr	r3, [r3, #16]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d111      	bne.n	8002d4e <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d2e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	b29b      	uxth	r3, r3
 8002d38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d3c:	b29a      	uxth	r2, r3
 8002d3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d40:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d46:	1c9a      	adds	r2, r3, #2
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	629a      	str	r2, [r3, #40]	@ 0x28
 8002d4c:	e024      	b.n	8002d98 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d52:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d5c:	d007      	beq.n	8002d6e <UART_Receive_IT+0x74>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d10a      	bne.n	8002d7c <UART_Receive_IT+0x82>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	691b      	ldr	r3, [r3, #16]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d106      	bne.n	8002d7c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	b2da      	uxtb	r2, r3
 8002d76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d78:	701a      	strb	r2, [r3, #0]
 8002d7a:	e008      	b.n	8002d8e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	b2db      	uxtb	r3, r3
 8002d84:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002d88:	b2da      	uxtb	r2, r3
 8002d8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d8c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d92:	1c5a      	adds	r2, r3, #1
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002d9c:	b29b      	uxth	r3, r3
 8002d9e:	3b01      	subs	r3, #1
 8002da0:	b29b      	uxth	r3, r3
 8002da2:	687a      	ldr	r2, [r7, #4]
 8002da4:	4619      	mov	r1, r3
 8002da6:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d15d      	bne.n	8002e68 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	68da      	ldr	r2, [r3, #12]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f022 0220 	bic.w	r2, r2, #32
 8002dba:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	68da      	ldr	r2, [r3, #12]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002dca:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	695a      	ldr	r2, [r3, #20]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f022 0201 	bic.w	r2, r2, #1
 8002dda:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2220      	movs	r2, #32
 8002de0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2200      	movs	r2, #0
 8002de8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dee:	2b01      	cmp	r3, #1
 8002df0:	d135      	bne.n	8002e5e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2200      	movs	r2, #0
 8002df6:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	330c      	adds	r3, #12
 8002dfe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	e853 3f00 	ldrex	r3, [r3]
 8002e06:	613b      	str	r3, [r7, #16]
   return(result);
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	f023 0310 	bic.w	r3, r3, #16
 8002e0e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	330c      	adds	r3, #12
 8002e16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e18:	623a      	str	r2, [r7, #32]
 8002e1a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e1c:	69f9      	ldr	r1, [r7, #28]
 8002e1e:	6a3a      	ldr	r2, [r7, #32]
 8002e20:	e841 2300 	strex	r3, r2, [r1]
 8002e24:	61bb      	str	r3, [r7, #24]
   return(result);
 8002e26:	69bb      	ldr	r3, [r7, #24]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d1e5      	bne.n	8002df8 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f003 0310 	and.w	r3, r3, #16
 8002e36:	2b10      	cmp	r3, #16
 8002e38:	d10a      	bne.n	8002e50 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	60fb      	str	r3, [r7, #12]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	60fb      	str	r3, [r7, #12]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	60fb      	str	r3, [r7, #12]
 8002e4e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002e54:	4619      	mov	r1, r3
 8002e56:	6878      	ldr	r0, [r7, #4]
 8002e58:	f7ff fe0e 	bl	8002a78 <HAL_UARTEx_RxEventCallback>
 8002e5c:	e002      	b.n	8002e64 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002e5e:	6878      	ldr	r0, [r7, #4]
 8002e60:	f7ff fdf6 	bl	8002a50 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002e64:	2300      	movs	r3, #0
 8002e66:	e002      	b.n	8002e6e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	e000      	b.n	8002e6e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002e6c:	2302      	movs	r3, #2
  }
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	3730      	adds	r7, #48	@ 0x30
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}
	...

08002e78 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e7c:	b0c0      	sub	sp, #256	@ 0x100
 8002e7e:	af00      	add	r7, sp, #0
 8002e80:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	691b      	ldr	r3, [r3, #16]
 8002e8c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002e90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e94:	68d9      	ldr	r1, [r3, #12]
 8002e96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e9a:	681a      	ldr	r2, [r3, #0]
 8002e9c:	ea40 0301 	orr.w	r3, r0, r1
 8002ea0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002ea2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ea6:	689a      	ldr	r2, [r3, #8]
 8002ea8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002eac:	691b      	ldr	r3, [r3, #16]
 8002eae:	431a      	orrs	r2, r3
 8002eb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002eb4:	695b      	ldr	r3, [r3, #20]
 8002eb6:	431a      	orrs	r2, r3
 8002eb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ebc:	69db      	ldr	r3, [r3, #28]
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002ec4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	68db      	ldr	r3, [r3, #12]
 8002ecc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002ed0:	f021 010c 	bic.w	r1, r1, #12
 8002ed4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ed8:	681a      	ldr	r2, [r3, #0]
 8002eda:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002ede:	430b      	orrs	r3, r1
 8002ee0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002ee2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	695b      	ldr	r3, [r3, #20]
 8002eea:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002eee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ef2:	6999      	ldr	r1, [r3, #24]
 8002ef4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ef8:	681a      	ldr	r2, [r3, #0]
 8002efa:	ea40 0301 	orr.w	r3, r0, r1
 8002efe:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002f00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f04:	681a      	ldr	r2, [r3, #0]
 8002f06:	4b8f      	ldr	r3, [pc, #572]	@ (8003144 <UART_SetConfig+0x2cc>)
 8002f08:	429a      	cmp	r2, r3
 8002f0a:	d005      	beq.n	8002f18 <UART_SetConfig+0xa0>
 8002f0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f10:	681a      	ldr	r2, [r3, #0]
 8002f12:	4b8d      	ldr	r3, [pc, #564]	@ (8003148 <UART_SetConfig+0x2d0>)
 8002f14:	429a      	cmp	r2, r3
 8002f16:	d104      	bne.n	8002f22 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002f18:	f7fe fede 	bl	8001cd8 <HAL_RCC_GetPCLK2Freq>
 8002f1c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002f20:	e003      	b.n	8002f2a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002f22:	f7fe fec5 	bl	8001cb0 <HAL_RCC_GetPCLK1Freq>
 8002f26:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f2e:	69db      	ldr	r3, [r3, #28]
 8002f30:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002f34:	f040 810c 	bne.w	8003150 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002f38:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002f42:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002f46:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002f4a:	4622      	mov	r2, r4
 8002f4c:	462b      	mov	r3, r5
 8002f4e:	1891      	adds	r1, r2, r2
 8002f50:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002f52:	415b      	adcs	r3, r3
 8002f54:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002f56:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002f5a:	4621      	mov	r1, r4
 8002f5c:	eb12 0801 	adds.w	r8, r2, r1
 8002f60:	4629      	mov	r1, r5
 8002f62:	eb43 0901 	adc.w	r9, r3, r1
 8002f66:	f04f 0200 	mov.w	r2, #0
 8002f6a:	f04f 0300 	mov.w	r3, #0
 8002f6e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002f72:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002f76:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002f7a:	4690      	mov	r8, r2
 8002f7c:	4699      	mov	r9, r3
 8002f7e:	4623      	mov	r3, r4
 8002f80:	eb18 0303 	adds.w	r3, r8, r3
 8002f84:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002f88:	462b      	mov	r3, r5
 8002f8a:	eb49 0303 	adc.w	r3, r9, r3
 8002f8e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002f92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002f9e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002fa2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002fa6:	460b      	mov	r3, r1
 8002fa8:	18db      	adds	r3, r3, r3
 8002faa:	653b      	str	r3, [r7, #80]	@ 0x50
 8002fac:	4613      	mov	r3, r2
 8002fae:	eb42 0303 	adc.w	r3, r2, r3
 8002fb2:	657b      	str	r3, [r7, #84]	@ 0x54
 8002fb4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002fb8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002fbc:	f7fd f91e 	bl	80001fc <__aeabi_uldivmod>
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	460b      	mov	r3, r1
 8002fc4:	4b61      	ldr	r3, [pc, #388]	@ (800314c <UART_SetConfig+0x2d4>)
 8002fc6:	fba3 2302 	umull	r2, r3, r3, r2
 8002fca:	095b      	lsrs	r3, r3, #5
 8002fcc:	011c      	lsls	r4, r3, #4
 8002fce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002fd8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002fdc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002fe0:	4642      	mov	r2, r8
 8002fe2:	464b      	mov	r3, r9
 8002fe4:	1891      	adds	r1, r2, r2
 8002fe6:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002fe8:	415b      	adcs	r3, r3
 8002fea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002fec:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002ff0:	4641      	mov	r1, r8
 8002ff2:	eb12 0a01 	adds.w	sl, r2, r1
 8002ff6:	4649      	mov	r1, r9
 8002ff8:	eb43 0b01 	adc.w	fp, r3, r1
 8002ffc:	f04f 0200 	mov.w	r2, #0
 8003000:	f04f 0300 	mov.w	r3, #0
 8003004:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003008:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800300c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003010:	4692      	mov	sl, r2
 8003012:	469b      	mov	fp, r3
 8003014:	4643      	mov	r3, r8
 8003016:	eb1a 0303 	adds.w	r3, sl, r3
 800301a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800301e:	464b      	mov	r3, r9
 8003020:	eb4b 0303 	adc.w	r3, fp, r3
 8003024:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003028:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	2200      	movs	r2, #0
 8003030:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003034:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003038:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800303c:	460b      	mov	r3, r1
 800303e:	18db      	adds	r3, r3, r3
 8003040:	643b      	str	r3, [r7, #64]	@ 0x40
 8003042:	4613      	mov	r3, r2
 8003044:	eb42 0303 	adc.w	r3, r2, r3
 8003048:	647b      	str	r3, [r7, #68]	@ 0x44
 800304a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800304e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003052:	f7fd f8d3 	bl	80001fc <__aeabi_uldivmod>
 8003056:	4602      	mov	r2, r0
 8003058:	460b      	mov	r3, r1
 800305a:	4611      	mov	r1, r2
 800305c:	4b3b      	ldr	r3, [pc, #236]	@ (800314c <UART_SetConfig+0x2d4>)
 800305e:	fba3 2301 	umull	r2, r3, r3, r1
 8003062:	095b      	lsrs	r3, r3, #5
 8003064:	2264      	movs	r2, #100	@ 0x64
 8003066:	fb02 f303 	mul.w	r3, r2, r3
 800306a:	1acb      	subs	r3, r1, r3
 800306c:	00db      	lsls	r3, r3, #3
 800306e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003072:	4b36      	ldr	r3, [pc, #216]	@ (800314c <UART_SetConfig+0x2d4>)
 8003074:	fba3 2302 	umull	r2, r3, r3, r2
 8003078:	095b      	lsrs	r3, r3, #5
 800307a:	005b      	lsls	r3, r3, #1
 800307c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003080:	441c      	add	r4, r3
 8003082:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003086:	2200      	movs	r2, #0
 8003088:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800308c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003090:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003094:	4642      	mov	r2, r8
 8003096:	464b      	mov	r3, r9
 8003098:	1891      	adds	r1, r2, r2
 800309a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800309c:	415b      	adcs	r3, r3
 800309e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80030a0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80030a4:	4641      	mov	r1, r8
 80030a6:	1851      	adds	r1, r2, r1
 80030a8:	6339      	str	r1, [r7, #48]	@ 0x30
 80030aa:	4649      	mov	r1, r9
 80030ac:	414b      	adcs	r3, r1
 80030ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80030b0:	f04f 0200 	mov.w	r2, #0
 80030b4:	f04f 0300 	mov.w	r3, #0
 80030b8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80030bc:	4659      	mov	r1, fp
 80030be:	00cb      	lsls	r3, r1, #3
 80030c0:	4651      	mov	r1, sl
 80030c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80030c6:	4651      	mov	r1, sl
 80030c8:	00ca      	lsls	r2, r1, #3
 80030ca:	4610      	mov	r0, r2
 80030cc:	4619      	mov	r1, r3
 80030ce:	4603      	mov	r3, r0
 80030d0:	4642      	mov	r2, r8
 80030d2:	189b      	adds	r3, r3, r2
 80030d4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80030d8:	464b      	mov	r3, r9
 80030da:	460a      	mov	r2, r1
 80030dc:	eb42 0303 	adc.w	r3, r2, r3
 80030e0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80030e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	2200      	movs	r2, #0
 80030ec:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80030f0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80030f4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80030f8:	460b      	mov	r3, r1
 80030fa:	18db      	adds	r3, r3, r3
 80030fc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80030fe:	4613      	mov	r3, r2
 8003100:	eb42 0303 	adc.w	r3, r2, r3
 8003104:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003106:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800310a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800310e:	f7fd f875 	bl	80001fc <__aeabi_uldivmod>
 8003112:	4602      	mov	r2, r0
 8003114:	460b      	mov	r3, r1
 8003116:	4b0d      	ldr	r3, [pc, #52]	@ (800314c <UART_SetConfig+0x2d4>)
 8003118:	fba3 1302 	umull	r1, r3, r3, r2
 800311c:	095b      	lsrs	r3, r3, #5
 800311e:	2164      	movs	r1, #100	@ 0x64
 8003120:	fb01 f303 	mul.w	r3, r1, r3
 8003124:	1ad3      	subs	r3, r2, r3
 8003126:	00db      	lsls	r3, r3, #3
 8003128:	3332      	adds	r3, #50	@ 0x32
 800312a:	4a08      	ldr	r2, [pc, #32]	@ (800314c <UART_SetConfig+0x2d4>)
 800312c:	fba2 2303 	umull	r2, r3, r2, r3
 8003130:	095b      	lsrs	r3, r3, #5
 8003132:	f003 0207 	and.w	r2, r3, #7
 8003136:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4422      	add	r2, r4
 800313e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003140:	e106      	b.n	8003350 <UART_SetConfig+0x4d8>
 8003142:	bf00      	nop
 8003144:	40011000 	.word	0x40011000
 8003148:	40011400 	.word	0x40011400
 800314c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003150:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003154:	2200      	movs	r2, #0
 8003156:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800315a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800315e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003162:	4642      	mov	r2, r8
 8003164:	464b      	mov	r3, r9
 8003166:	1891      	adds	r1, r2, r2
 8003168:	6239      	str	r1, [r7, #32]
 800316a:	415b      	adcs	r3, r3
 800316c:	627b      	str	r3, [r7, #36]	@ 0x24
 800316e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003172:	4641      	mov	r1, r8
 8003174:	1854      	adds	r4, r2, r1
 8003176:	4649      	mov	r1, r9
 8003178:	eb43 0501 	adc.w	r5, r3, r1
 800317c:	f04f 0200 	mov.w	r2, #0
 8003180:	f04f 0300 	mov.w	r3, #0
 8003184:	00eb      	lsls	r3, r5, #3
 8003186:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800318a:	00e2      	lsls	r2, r4, #3
 800318c:	4614      	mov	r4, r2
 800318e:	461d      	mov	r5, r3
 8003190:	4643      	mov	r3, r8
 8003192:	18e3      	adds	r3, r4, r3
 8003194:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003198:	464b      	mov	r3, r9
 800319a:	eb45 0303 	adc.w	r3, r5, r3
 800319e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80031a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	2200      	movs	r2, #0
 80031aa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80031ae:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80031b2:	f04f 0200 	mov.w	r2, #0
 80031b6:	f04f 0300 	mov.w	r3, #0
 80031ba:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80031be:	4629      	mov	r1, r5
 80031c0:	008b      	lsls	r3, r1, #2
 80031c2:	4621      	mov	r1, r4
 80031c4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80031c8:	4621      	mov	r1, r4
 80031ca:	008a      	lsls	r2, r1, #2
 80031cc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80031d0:	f7fd f814 	bl	80001fc <__aeabi_uldivmod>
 80031d4:	4602      	mov	r2, r0
 80031d6:	460b      	mov	r3, r1
 80031d8:	4b60      	ldr	r3, [pc, #384]	@ (800335c <UART_SetConfig+0x4e4>)
 80031da:	fba3 2302 	umull	r2, r3, r3, r2
 80031de:	095b      	lsrs	r3, r3, #5
 80031e0:	011c      	lsls	r4, r3, #4
 80031e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80031e6:	2200      	movs	r2, #0
 80031e8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80031ec:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80031f0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80031f4:	4642      	mov	r2, r8
 80031f6:	464b      	mov	r3, r9
 80031f8:	1891      	adds	r1, r2, r2
 80031fa:	61b9      	str	r1, [r7, #24]
 80031fc:	415b      	adcs	r3, r3
 80031fe:	61fb      	str	r3, [r7, #28]
 8003200:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003204:	4641      	mov	r1, r8
 8003206:	1851      	adds	r1, r2, r1
 8003208:	6139      	str	r1, [r7, #16]
 800320a:	4649      	mov	r1, r9
 800320c:	414b      	adcs	r3, r1
 800320e:	617b      	str	r3, [r7, #20]
 8003210:	f04f 0200 	mov.w	r2, #0
 8003214:	f04f 0300 	mov.w	r3, #0
 8003218:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800321c:	4659      	mov	r1, fp
 800321e:	00cb      	lsls	r3, r1, #3
 8003220:	4651      	mov	r1, sl
 8003222:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003226:	4651      	mov	r1, sl
 8003228:	00ca      	lsls	r2, r1, #3
 800322a:	4610      	mov	r0, r2
 800322c:	4619      	mov	r1, r3
 800322e:	4603      	mov	r3, r0
 8003230:	4642      	mov	r2, r8
 8003232:	189b      	adds	r3, r3, r2
 8003234:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003238:	464b      	mov	r3, r9
 800323a:	460a      	mov	r2, r1
 800323c:	eb42 0303 	adc.w	r3, r2, r3
 8003240:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003244:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	2200      	movs	r2, #0
 800324c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800324e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003250:	f04f 0200 	mov.w	r2, #0
 8003254:	f04f 0300 	mov.w	r3, #0
 8003258:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800325c:	4649      	mov	r1, r9
 800325e:	008b      	lsls	r3, r1, #2
 8003260:	4641      	mov	r1, r8
 8003262:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003266:	4641      	mov	r1, r8
 8003268:	008a      	lsls	r2, r1, #2
 800326a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800326e:	f7fc ffc5 	bl	80001fc <__aeabi_uldivmod>
 8003272:	4602      	mov	r2, r0
 8003274:	460b      	mov	r3, r1
 8003276:	4611      	mov	r1, r2
 8003278:	4b38      	ldr	r3, [pc, #224]	@ (800335c <UART_SetConfig+0x4e4>)
 800327a:	fba3 2301 	umull	r2, r3, r3, r1
 800327e:	095b      	lsrs	r3, r3, #5
 8003280:	2264      	movs	r2, #100	@ 0x64
 8003282:	fb02 f303 	mul.w	r3, r2, r3
 8003286:	1acb      	subs	r3, r1, r3
 8003288:	011b      	lsls	r3, r3, #4
 800328a:	3332      	adds	r3, #50	@ 0x32
 800328c:	4a33      	ldr	r2, [pc, #204]	@ (800335c <UART_SetConfig+0x4e4>)
 800328e:	fba2 2303 	umull	r2, r3, r2, r3
 8003292:	095b      	lsrs	r3, r3, #5
 8003294:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003298:	441c      	add	r4, r3
 800329a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800329e:	2200      	movs	r2, #0
 80032a0:	673b      	str	r3, [r7, #112]	@ 0x70
 80032a2:	677a      	str	r2, [r7, #116]	@ 0x74
 80032a4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80032a8:	4642      	mov	r2, r8
 80032aa:	464b      	mov	r3, r9
 80032ac:	1891      	adds	r1, r2, r2
 80032ae:	60b9      	str	r1, [r7, #8]
 80032b0:	415b      	adcs	r3, r3
 80032b2:	60fb      	str	r3, [r7, #12]
 80032b4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80032b8:	4641      	mov	r1, r8
 80032ba:	1851      	adds	r1, r2, r1
 80032bc:	6039      	str	r1, [r7, #0]
 80032be:	4649      	mov	r1, r9
 80032c0:	414b      	adcs	r3, r1
 80032c2:	607b      	str	r3, [r7, #4]
 80032c4:	f04f 0200 	mov.w	r2, #0
 80032c8:	f04f 0300 	mov.w	r3, #0
 80032cc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80032d0:	4659      	mov	r1, fp
 80032d2:	00cb      	lsls	r3, r1, #3
 80032d4:	4651      	mov	r1, sl
 80032d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80032da:	4651      	mov	r1, sl
 80032dc:	00ca      	lsls	r2, r1, #3
 80032de:	4610      	mov	r0, r2
 80032e0:	4619      	mov	r1, r3
 80032e2:	4603      	mov	r3, r0
 80032e4:	4642      	mov	r2, r8
 80032e6:	189b      	adds	r3, r3, r2
 80032e8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80032ea:	464b      	mov	r3, r9
 80032ec:	460a      	mov	r2, r1
 80032ee:	eb42 0303 	adc.w	r3, r2, r3
 80032f2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80032f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	2200      	movs	r2, #0
 80032fc:	663b      	str	r3, [r7, #96]	@ 0x60
 80032fe:	667a      	str	r2, [r7, #100]	@ 0x64
 8003300:	f04f 0200 	mov.w	r2, #0
 8003304:	f04f 0300 	mov.w	r3, #0
 8003308:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800330c:	4649      	mov	r1, r9
 800330e:	008b      	lsls	r3, r1, #2
 8003310:	4641      	mov	r1, r8
 8003312:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003316:	4641      	mov	r1, r8
 8003318:	008a      	lsls	r2, r1, #2
 800331a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800331e:	f7fc ff6d 	bl	80001fc <__aeabi_uldivmod>
 8003322:	4602      	mov	r2, r0
 8003324:	460b      	mov	r3, r1
 8003326:	4b0d      	ldr	r3, [pc, #52]	@ (800335c <UART_SetConfig+0x4e4>)
 8003328:	fba3 1302 	umull	r1, r3, r3, r2
 800332c:	095b      	lsrs	r3, r3, #5
 800332e:	2164      	movs	r1, #100	@ 0x64
 8003330:	fb01 f303 	mul.w	r3, r1, r3
 8003334:	1ad3      	subs	r3, r2, r3
 8003336:	011b      	lsls	r3, r3, #4
 8003338:	3332      	adds	r3, #50	@ 0x32
 800333a:	4a08      	ldr	r2, [pc, #32]	@ (800335c <UART_SetConfig+0x4e4>)
 800333c:	fba2 2303 	umull	r2, r3, r2, r3
 8003340:	095b      	lsrs	r3, r3, #5
 8003342:	f003 020f 	and.w	r2, r3, #15
 8003346:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4422      	add	r2, r4
 800334e:	609a      	str	r2, [r3, #8]
}
 8003350:	bf00      	nop
 8003352:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003356:	46bd      	mov	sp, r7
 8003358:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800335c:	51eb851f 	.word	0x51eb851f

08003360 <memset>:
 8003360:	4402      	add	r2, r0
 8003362:	4603      	mov	r3, r0
 8003364:	4293      	cmp	r3, r2
 8003366:	d100      	bne.n	800336a <memset+0xa>
 8003368:	4770      	bx	lr
 800336a:	f803 1b01 	strb.w	r1, [r3], #1
 800336e:	e7f9      	b.n	8003364 <memset+0x4>

08003370 <__libc_init_array>:
 8003370:	b570      	push	{r4, r5, r6, lr}
 8003372:	4d0d      	ldr	r5, [pc, #52]	@ (80033a8 <__libc_init_array+0x38>)
 8003374:	4c0d      	ldr	r4, [pc, #52]	@ (80033ac <__libc_init_array+0x3c>)
 8003376:	1b64      	subs	r4, r4, r5
 8003378:	10a4      	asrs	r4, r4, #2
 800337a:	2600      	movs	r6, #0
 800337c:	42a6      	cmp	r6, r4
 800337e:	d109      	bne.n	8003394 <__libc_init_array+0x24>
 8003380:	4d0b      	ldr	r5, [pc, #44]	@ (80033b0 <__libc_init_array+0x40>)
 8003382:	4c0c      	ldr	r4, [pc, #48]	@ (80033b4 <__libc_init_array+0x44>)
 8003384:	f000 f818 	bl	80033b8 <_init>
 8003388:	1b64      	subs	r4, r4, r5
 800338a:	10a4      	asrs	r4, r4, #2
 800338c:	2600      	movs	r6, #0
 800338e:	42a6      	cmp	r6, r4
 8003390:	d105      	bne.n	800339e <__libc_init_array+0x2e>
 8003392:	bd70      	pop	{r4, r5, r6, pc}
 8003394:	f855 3b04 	ldr.w	r3, [r5], #4
 8003398:	4798      	blx	r3
 800339a:	3601      	adds	r6, #1
 800339c:	e7ee      	b.n	800337c <__libc_init_array+0xc>
 800339e:	f855 3b04 	ldr.w	r3, [r5], #4
 80033a2:	4798      	blx	r3
 80033a4:	3601      	adds	r6, #1
 80033a6:	e7f2      	b.n	800338e <__libc_init_array+0x1e>
 80033a8:	080033f0 	.word	0x080033f0
 80033ac:	080033f0 	.word	0x080033f0
 80033b0:	080033f0 	.word	0x080033f0
 80033b4:	080033f4 	.word	0x080033f4

080033b8 <_init>:
 80033b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033ba:	bf00      	nop
 80033bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033be:	bc08      	pop	{r3}
 80033c0:	469e      	mov	lr, r3
 80033c2:	4770      	bx	lr

080033c4 <_fini>:
 80033c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033c6:	bf00      	nop
 80033c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033ca:	bc08      	pop	{r3}
 80033cc:	469e      	mov	lr, r3
 80033ce:	4770      	bx	lr
